<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[iOS 常用第三方库]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS-%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>名称</th>
<th>特性</th>
<th>效果图</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">MJRefresh</a></strong></td>
<td>下拉刷新、上拉加载</td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/iltercengiz/ICViewPager" target="_blank" rel="external">ICViewPager</a></strong></td>
<td></td>
<td><img src="https://raw.githubusercontent.com/iltercengiz/ICViewPager/master/Resources/Screenshot.jpg" alt="ICViewPager"></td>
</tr>
<tr>
<td><strong><a href="https://github.com/icanzilb/JSONModel" target="_blank" rel="external">JSONModel</a></strong></td>
<td>json与model相互转换</td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a></strong></td>
<td>代码写自动布局</td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="external">UITableView-FDTemplateLayoutCell</a></strong></td>
<td>自动布局时计算cell高度</td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/forkingdog/FDFullscreenPopGesture" target="_blank" rel="external">FDFullscreenPopGesture</a></strong></td>
<td>让UINavigationController在屏幕任何位置均可滑动返回</td>
<td><img src="https://raw.githubusercontent.com/forkingdog/FDFullscreenPopGesture/master/Snapshots/snapshot0.gif" alt="FDFullscreenPopGesture"></td>
</tr>
<tr>
<td><strong><a href="https://github.com/ninjinkun/NJKWebViewProgress" target="_blank" rel="external">NJKWebViewProgress</a></strong></td>
<td>UIWebView加载进度条</td>
<td><img src="https://camo.githubusercontent.com/082fc708cc461dc53832b7d14d5affdf475dd57b/68747470733a2f2f7261772e6769746875622e636f6d2f6e696e6a696e6b756e2f4e4a4b5765625669657750726f67726573732f6d61737465722f44656d6f4170702f53637265656e73686f742f73637265656e73686f74312e706e67" alt="NJKWebViewProgress"></td>
</tr>
<tr>
<td><strong><a href="https://github.com/mikefrederick/MFSideMenu" target="_blank" rel="external">MFSideMenu</a></strong></td>
<td>左右抽屉效果</td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/maxep/MXSegmentedPager" target="_blank" rel="external">MXSegmentedPager</a></strong></td>
<td>上下滑动+水平滑动</td>
<td>f</td>
</tr>
<tr>
<td><strong><a href="https://github.com/JNTian/JTNavigationController" target="_blank" rel="external">JTNavigationController</a></strong></td>
<td>UINavigationBar不同颜色切换。</td>
<td><img src="https://github.com/JNTian/JTNavigationController/raw/master/demo.gif" alt="JTNavigationController"></td>
</tr>
<tr>
<td><strong><a href="https://github.com/nicklockwood/FXBlurView" target="_blank" rel="external">FXBlurView</a></strong></td>
<td>实时背影模糊效果</td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/neilang/NAMapKit" target="_blank" rel="external">NAMapKit</a></strong></td>
<td>手绘图导览</td>
<td><img src="https://github.com/neilang/NAMapKit/raw/master/Demo/Screenshots/namapkit.gif" alt="NAMapKit"></td>
</tr>
<tr>
<td><strong><a href="https://github.com/robbykraft/Panorama" target="_blank" rel="external">Panorama</a></strong></td>
<td>360度全景浏览图片，支持重力感应。</td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/hypoyao/GYHttpMock" target="_blank" rel="external">GYHttpMock</a></strong></td>
<td><a href="http://wereadteam.github.io/2016/02/25/GYHttpMock/" target="_blank" rel="external">模拟网络请求</a></td>
<td></td>
</tr>
<tr>
<td><strong><a href="https://github.com/CharlinFeng/CorePhotoBroswerVC" target="_blank" rel="external">CorePhotoBroswerVC</a></strong></td>
<td>图片浏览</td>
<td><img src="https://github.com/CharlinFeng/CorePhotoBroswerVC/raw/master/CorePhotoBroswerVC/show/zoomMax.gif" alt="CorePhotoBroswerVC"></td>
</tr>
<tr>
<td><strong><a href="https://github.com/WenchaoD/FSCalendar" target="_blank" rel="external">FSCalendar</a></strong></td>
<td>日期选择</td>
<td><img src="https://cloud.githubusercontent.com/assets/5186464/13727902/21a90042-e940-11e5-9b9f-392f38cf007d.gif" alt="FSCalendar"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS多线程之GCD]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BGCD/</url>
      <content type="html"><![CDATA[<p>相关文章：<br><a href="http://www.jianshu.com/p/1a511bbf97f7" target="_blank" rel="external">iOS多线程之NSThread</a><br><a href="http://www.jianshu.com/p/29cffaf280b8" target="_blank" rel="external">iOS多线程之NSOperations</a></p>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><table>
<thead>
<tr>
<th>队列</th>
<th>Api</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>主队列（main queue）</td>
<td><code>dispatch_get_main_queue()</code></td>
<td>串行队列，可以操纵UI</td>
</tr>
<tr>
<td>全局调度队列（Global Dispatch Queues）</td>
<td><code>dispatch_get_global_queue()</code></td>
<td>并行队列，按照执行优先级，分成4种global queue：<br><code>DISPATCH_QUEUE_PRIORITY_HIGH</code>, <code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code>, <code>DISPATCH_QUEUE_PRIORITY_LOW</code>, <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code></td>
</tr>
<tr>
<td>自创建队列</td>
<td><code>dispatch_queue_create()</code></td>
<td>可以创建：<br>串行（<code>DISPATCH_QUEUE_SERIAL</code>）、<br>并行（<code>DISPATCH_QUEUE_CONCURRENT</code>）队列</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>并行队列</th>
<th>串行队列</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://upload-images.jianshu.io/upload_images/267318-a6708bac62b103a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并行队列"></td>
<td><img src="http://upload-images.jianshu.io/upload_images/267318-d299f587c599abc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="串行队列"></td>
</tr>
</tbody>
</table>
<p>队列和线程是两个不同的概念。一个队列可以有多个线程。每个队列中的操作会在所属的线程中运行。举个例子你创建一个并行队列，然后添加三个操作到里面。队列会发起三个单独的线程，然后让所有操作在各自的线程中并发运行。</p>
<h3 id="提交任务-block-到队列-queue"><a href="#提交任务-block-到队列-queue" class="headerlink" title="提交任务(block)到队列(queue)"></a>提交任务(block)到队列(queue)</h3><table>
<thead>
<tr>
<th>提交方式</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dispatch_async</code>(dispatch_queue_t queue, dispatch_block_t block)</td>
<td>异步提交block到queue</td>
</tr>
<tr>
<td><code>dispatch_sync</code>(dispatch_queue_t queue, dispatch_block_t block)</td>
<td>同步地提交工作并在返回前<strong>等待</strong>它完成</td>
</tr>
<tr>
<td><code>dispatch_after</code>(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)</td>
<td>异步提交block到queue，并且延迟执行block，<br><code>dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC))</code>表示3秒后</td>
</tr>
<tr>
<td><code>dispatch_barrier_async</code>(dispatch_queue_t queue, dispatch_block_t block)</td>
<td>异步提交block，但是该block被执行时，队列中其它block不会被执行，即barrier相当于一个狭窄的通道 <br><strong>场景：</strong>多线程读写竞态资源，多个读线程间可以并行，但读写、写写线程间只能串行，这时可以：<br>1）使用并发队列（为了防止<code>barrier</code>特性影响其它线程，不要使用<code>dispatch_get_global_queue</code>，而是使用<code>dispatch_queue_create</code>来创建新队列）<br>2）使用<code>dispatch_barrier_async</code>添加写block，保证队列中写block执行时不会有其它读写block正在执行</td>
</tr>
</tbody>
</table>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-d3ead46676ea07c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="barrier执行模型"></p>
<p><strong>注意：</strong><br>如果你调用 dispatch_sync 并放在你已运行着的当前<strong>串行</strong>队列。这会导致死锁，因为调用会一直等待直到 Block 完成，但 Block 不能完成（它甚至不会开始！），直到当前已经存在的任务完成，而当前任务无法完成！举个例子：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController1</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="comment">// dispatch_sync同步提交block到main队列（当前队列）并**等待**block执行完毕，而由于是串行队列，block需要等待当前任务执行完毕，双向等待造成死锁。</span></div><div class="line">    <span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"hello world"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// 下面这条NSLog不会被执行，因为线程已经死锁</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"here"</span>);</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController2</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// 创建一个并行队列，，，，（*注意：*如果将*DISPATCH_QUEUE_CONCURRENT*修改成*DISPATCH_QUEUE_SERIAL*，即创建串行队列，就会发生死锁！！！）</span></div><div class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"abc"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"..1"</span>);</div><div class="line">        <span class="comment">// 因为是并行队列，下面的block不需要等待当前block执行完毕，就不会发生死锁。</span></div><div class="line">        <span class="built_in">dispatch_sync</span>(queue, ^&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"..2"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"here"</span>);</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><blockquote>
<p>dispatch_once() 以线程安全的方式执行且仅执行其代码块一次。试图访问临界区（即传递给 dispatch_once 的代码）的不同的线程会在临界区已有一个线程的情况下被阻塞，直到临界区完成为止。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">User</span></span></div><div class="line">+ (<span class="keyword">instancetype</span>)sharedUser</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> User *instance = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        instance = [[User alloc] init];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="调度组"><a href="#调度组" class="headerlink" title="调度组"></a>调度组</h3><p>Dispatch Group 会在整个组的任务都完成时通知你。这些任务可以是同步的，也可以是异步的，即便在不同的队列也行。而且在整个组的任务都完成时，Dispatch Group 可以用同步的或者异步的方式通知你。</p>
<table>
<thead>
<tr>
<th>创建group Api</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>dispatch_group_t <code>dispatch_group_create</code>(void)</td>
<td>创建一个group</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>将任务(block)添加到group</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dispatch_group_async</code>(dispatch_group_t group,<br> dispatch_queue_t queue,<br> dispatch_block_t block)</td>
<td>异步把block提交到queue，并且将block分配到指定的group</td>
</tr>
<tr>
<td><code>dispatch_group_enter</code>(dispatch_group_t group)</td>
<td>手动表明block进入group,<code>dispatch_group_enter</code>与<code>dispatch_group_leave</code>是成对出现的。</td>
</tr>
<tr>
<td><code>dispatch_group_leave</code>(dispatch_group_t group)</td>
<td>手动表明block在group中执行完成</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>设置group完成时的通知/回调</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dispatch_group_wait</code>(dispatch_group_t group, dispatch_time_t timeout)</td>
<td>阻塞当前线程，直到group里面所有的任务都完成或者等到某个超时发生</td>
</tr>
<tr>
<td><code>dispatch_group_notify</code>(dispatch_group_t group, <br> dispatch_queue_t queue, <br>dispatch_block_t block)</td>
<td>异步设置group里所有任务都完成时，在queue队列中执行通知回调block</td>
</tr>
</tbody>
</table>
<p>多图片下载示例：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"test"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://a/%zd.png"</span>, i]];</div><div class="line">        <span class="comment">// 表示block进入group</span></div><div class="line">        dispatch_group_enter(group);</div><div class="line">        [[SDWebImageDownloader sharedDownloader] downloadImageWithURL:url options:<span class="number">0</span> progress:<span class="literal">nil</span> completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished) &#123;</div><div class="line">            <span class="comment">// 表示block执行完成</span></div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置等待3秒钟</span></div><div class="line">    dispatch_time_t timeoutTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span>  * <span class="built_in">NSEC_PER_SEC</span>));</div><div class="line">    <span class="keyword">if</span>(dispatch_group_wait(group, timeoutTime))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"图片下载超时"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"所有图片都下载完成"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量让你控制多个消费者对有限数量资源的访问<br>原则：当信号量小于等于0时，<code>dispatch_semaphore_wait</code>会阻塞线程，当<code>dispatch_semaphore_signal</code>时会让信号量加1，如果这时信号量大于0，则唤醒阻塞的线程。</p>
<table>
<thead>
<tr>
<th>Api</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>dispatch_semaphore_t <code>dispatch_semaphore_create</code>(long value)</td>
<td>创建一个信号量，并且设置信号量的初始值</td>
</tr>
<tr>
<td><code>dispatch_semaphore_wait</code>(dispatch_semaphore_t dsema, dispatch_time_t timeout)</td>
<td>等待一个信号量，如果当前信号量大于0，则信号量减1，线程往下执行。否则线程阻塞，直到被信号量大于0时被唤醒或者等待超时</td>
</tr>
<tr>
<td><code>dispatch_semaphore_signal</code>(dispatch_semaphore_t dsema)</td>
<td>让信号量加1，如果当前信号量大于0，则唤醒一个waiting的线程</td>
</tr>
</tbody>
</table>
<p>图片下载示例：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建信号量，并且初始化为0</span></div><div class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"><span class="comment">// 下载图片</span></div><div class="line">[[SDWebImageDownloader sharedDownloader] downloadImageWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://a/b.png"</span>] options:<span class="number">0</span> progress:<span class="literal">nil</span> completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished) &#123;</div><div class="line">    <span class="comment">// 设置信号量+1，此时信号量大于0，会唤醒等待的线程。</span></div><div class="line">    dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 设置等待3秒钟</span></div><div class="line">dispatch_time_t timeoutTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span> \\* <span class="built_in">NSEC_PER_SEC</span>));</div><div class="line"><span class="comment">// 此时线程会阻塞，只到图片下载完成或者等待超时</span></div><div class="line"><span class="keyword">if</span>(dispatch_semaphore_wait(semaphore, timeoutTime))</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"等待超时"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"图片下载完毕"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://www.cocoachina.com/industry/20140428/8248.html" target="_blank" rel="external">GCD 深入理解（一）</a><br><a href="http://www.cocoachina.com/industry/20140515/8433.html" target="_blank" rel="external">GCD 深入理解（二）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS多线程之NSOperations]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BNSOperations/</url>
      <content type="html"><![CDATA[<p>相关文章：<br><a href="http://www.jianshu.com/p/1a511bbf97f7" target="_blank" rel="external">iOS多线程之NSThread</a><br><a href="http://www.jianshu.com/p/7269be164cf0" target="_blank" rel="external">iOS多线程之GCD</a></p>
<p><code>NSOperation</code>(任务)与<code>NSOperationQueue</code>(队列)是在GCD之上构建的，但是相较于GCD它具有如下特点：</p>
<ul>
<li>采用面向对象的方式</li>
<li>任务、队列可以被cancel/suspend</li>
<li><code>NSOperation</code>(任务)之间可以添加依赖(dependency)</li>
</ul>
<h3 id="NSOperationQueue（队列）"><a href="#NSOperationQueue（队列）" class="headerlink" title="NSOperationQueue（队列）"></a>NSOperationQueue（队列）</h3><table>
<thead>
<tr>
<th>Api</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (void)<code>addOperation</code>:(NSOperation *)op;<br>- (void)<code>addOperationWithBlock</code>:(void (^)(void))block;</td>
<td>添加任务到queue</td>
</tr>
<tr>
<td>@property NSInteger <code>maxConcurrentOperationCount</code>;</td>
<td>设置queue的并发数，如果为1则相当于是<code>串行队列</code></td>
</tr>
<tr>
<td>@property (getter=isSuspended) BOOL <code>suspended</code></td>
<td>挂起或者取消挂起</td>
</tr>
<tr>
<td>@property (nullable, copy) NSString *name</td>
<td>设置队列的名称</td>
</tr>
<tr>
<td>- (void)<code>cancelAllOperations</code></td>
<td>取消所有任务，<br><strong>注意</strong>：这个方法只会将队列中所有任务(<code>NSOperation</code>)的状态属性字段<code>cancelled</code>设置为YES，并不会真正的kill掉这个任务的线程，通常需要在自定义的<code>NSOperation</code>内部重写<code>main</code>方法（任务代码），并在<code>main</code>方法中时不时的判断任务是否<code>isCancelled</code>，如果是则主动中止任务并返回</td>
</tr>
<tr>
<td><code>+</code> (nullable NSOperationQueue *)<code>currentQueue</code></td>
<td>获取当前队列，注意是类方法</td>
</tr>
<tr>
<td><code>+</code> (NSOperationQueue *)<code>mainQueue</code></td>
<td>获取main队列</td>
</tr>
</tbody>
</table>
<h3 id="NSOperation-（任务）"><a href="#NSOperation-（任务）" class="headerlink" title="NSOperation （任务）"></a>NSOperation （任务）</h3><table>
<thead>
<tr>
<th>Api</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (void)<code>start</code>; <br>- (void)<code>main</code>;</td>
<td>一般我们不需要重载<code>start</code>方法。<br>1）当我们将任务添加到队列的时候，会自动调用这个任务的<code>start</code>方法 进行一些准备工作，之后执行<code>main</code>方法(核心任务代码)，</td>
</tr>
<tr>
<td>@property (readonly, getter=<code>isCancelled</code>) BOOL <code>cancelled</code>; <br>- (void)<code>cancel</code>;</td>
<td>设置任务状态为取消、判断任务是否被取消，<br><strong>注意：</strong><code>cancel</code>并不会主动取消任务，需要在<code>main</code>中根据<code>isCancelled</code>获取状态并进行相应的处理。</td>
</tr>
<tr>
<td>@property (readonly, getter=isExecuting) BOOL <code>executing</code></td>
<td>任务是否正在执行</td>
</tr>
<tr>
<td>@property (readonly, getter=isFinished) BOOL <code>finished</code></td>
<td>以下情况时为<code>YES</code>:<br>1）任务完成<br>2）任务被取消<br>3）任务被暂停</td>
</tr>
<tr>
<td>- (void)<code>addDependency</code>:(NSOperation *)op;</td>
<td>添加任务依赖，当前任务依赖于任务op，只有任务op执行完成后当前任务才会开始执行</td>
</tr>
<tr>
<td>- (void)<code>removeDependency</code>:(NSOperation *)op;</td>
<td>删除任务依赖</td>
</tr>
<tr>
<td>@property NSOperationQueuePriority <code>queuePriority</code>;</td>
<td>任务优先级</td>
</tr>
<tr>
<td>@property (nullable, copy) void (^completionBlock)(void);</td>
<td>设置任务完成后执行block</td>
</tr>
<tr>
<td>@property (nullable, copy) NSString *<code>name</code></td>
<td>任务名称</td>
</tr>
</tbody>
</table>
<h5 id="NSOperation的2个子类"><a href="#NSOperation的2个子类" class="headerlink" title="NSOperation的2个子类"></a>NSOperation的2个子类</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> `<span class="title">NSBlockOperation</span>` : <span class="title">NSOperation</span> </span></div><div class="line"><span class="comment">// 根据block返回NSBlockOperation实例</span></div><div class="line">+ (<span class="keyword">instancetype</span>)blockOperationWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block;</div><div class="line"></div><div class="line"><span class="comment">// 添加新的任务，这些任务会并行执行</span></div><div class="line">- (<span class="keyword">void</span>)addExecutionBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="keyword">void</span> (^)(<span class="keyword">void</span>)&gt; *executionBlocks;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> `<span class="title">NSInvocationOperation</span>` : <span class="title">NSOperation</span> </span></div><div class="line"><span class="comment">// 用selector的方式创建任务</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithTarget:(<span class="keyword">id</span>)target selector:(SEL)sel object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>参考：<br><a href="http://www.raywenderlich.com/19788/how-to-use-nsoperations-and-nsoperationqueues" target="_blank" rel="external">How To Use NSOperations and NSOperationQueues</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS多线程之NSThread]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BNSThread/</url>
      <content type="html"><![CDATA[<p>相关文章：<br><a href="http://www.jianshu.com/p/7269be164cf0" target="_blank" rel="external">iOS多线程之GCD</a><br><a href="http://www.jianshu.com/p/29cffaf280b8" target="_blank" rel="external">iOS多线程之NSOperations</a></p>
<h3 id="案例1–图片下载"><a href="#案例1–图片下载" class="headerlink" title="案例1–图片下载"></a>案例1–图片下载</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define kImageUrl   @<span class="meta-string">"https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png"</span></span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// 首先启动一个线程去下载图片</span></div><div class="line">    <span class="comment">// 方式1</span></div><div class="line">    <span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(downloadImage:) object:kImageUrl];</div><div class="line">    [thread start];</div><div class="line">    <span class="comment">// 方式2，会隐式的创建一个NSThread</span></div><div class="line">    <span class="comment">// [NSThread detachNewThreadSelector:@selector(downloadImage:) toTarget:self withObject:kImageUrl];</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 下载图片</span></div><div class="line">- (<span class="keyword">void</span>)downloadImage:(<span class="built_in">NSString</span> *)imageUrl</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSData</span> *data = [[<span class="built_in">NSData</span> alloc] initWithContentsOfURL:[<span class="built_in">NSURL</span> URLWithString:imageUrl]];</div><div class="line">    <span class="keyword">if</span>(data)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc] initWithData:data];</div><div class="line">        <span class="keyword">if</span>(image)</div><div class="line">        &#123;</div><div class="line">            [<span class="keyword">self</span> performSelectorOnMainThread:<span class="keyword">@selector</span>(updateUI:) withObject:image waitUntilDone:<span class="literal">YES</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在主线程刷新UI</span></div><div class="line">- (<span class="keyword">void</span>)updateUI:(<span class="built_in">UIImage</span> *)image</div><div class="line">&#123;</div><div class="line">    imgView.image = image;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="案例2–多售票窗口同时售票"><a href="#案例2–多售票窗口同时售票" class="headerlink" title="案例2–多售票窗口同时售票"></a>案例2–多售票窗口同时售票</h3><p><strong>说明：</strong>票源是共享数据，每个售票窗口相当于一个线程，为了保证数据的一致性，需要在每次售票时对票源加锁，票售出后释放锁</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSThread</span> *thread1;</div><div class="line">    <span class="built_in">NSThread</span> *thread2;</div><div class="line">    <span class="built_in">NSLock</span> *lock;</div><div class="line">    <span class="built_in">NSInteger</span> ticket;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    lock = [[<span class="built_in">NSLock</span> alloc] init];</div><div class="line">    ticket = <span class="number">20</span>; <span class="comment">//总共20张票</span></div><div class="line">    thread1 = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(saleTickets) object:<span class="literal">nil</span>];</div><div class="line">    [thread1 setName:<span class="string">@"窗口1"</span>];</div><div class="line">    thread2 = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(saleTickets) object:<span class="literal">nil</span>];</div><div class="line">    [thread2 setName:<span class="string">@"窗口2"</span>];</div><div class="line">    [thread1 start];</div><div class="line">    [thread2 start];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)saleTickets</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">TRUE</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//售票前加锁</span></div><div class="line">        [lock lock];</div><div class="line">        <span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            [lock unlock];</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"没有票源了..."</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ticket--;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ 当前余票:%zd,系统已售出:%zd"</span>, [[<span class="built_in">NSThread</span> currentThread] name], ticket, (<span class="number">20</span> - ticket));</div><div class="line">        <span class="comment">//票售出后释放锁</span></div><div class="line">        [lock unlock];</div><div class="line">        <span class="comment">//每售出一张票后，售票员需要休息一下下</span></div><div class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:arc4random() % <span class="number">3</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>输出：（实际输出结果可能每次不一样，因为售票员休息时间随机）</p>
<blockquote>
<p>窗口1 当前余票:19,系统已售出:1<br>窗口2 当前余票:18,系统已售出:2<br>窗口2 当前余票:17,系统已售出:3<br>窗口1 当前余票:16,系统已售出:4<br>窗口2 当前余票:15,系统已售出:5<br>窗口1 当前余票:14,系统已售出:6<br>窗口2 当前余票:13,系统已售出:7<br>窗口1 当前余票:12,系统已售出:8<br>窗口1 当前余票:11,系统已售出:9<br>窗口2 当前余票:10,系统已售出:10<br>窗口1 当前余票:9,系统已售出:11<br>窗口2 当前余票:8,系统已售出:12<br>窗口2 当前余票:7,系统已售出:13<br>窗口2 当前余票:6,系统已售出:14<br>窗口2 当前余票:5,系统已售出:15<br>窗口1 当前余票:4,系统已售出:16<br>窗口1 当前余票:3,系统已售出:17<br>窗口1 当前余票:2,系统已售出:18<br>窗口1 当前余票:1,系统已售出:19<br>窗口2 当前余票:0,系统已售出:20<br>窗口1 没有票源了…<br>窗口2 没有票源了…</p>
</blockquote>
<hr>
<h3 id="案例3–生产者、消费者"><a href="#案例3–生产者、消费者" class="headerlink" title="案例3–生产者、消费者"></a>案例3–生产者、消费者</h3><p><strong>说明：</strong>生来看看<code>NSConditionLock</code>的定义<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSConditionLock</span> : <span class="title">NSObject</span> &lt;<span class="title">NSLocking</span>&gt; </span></div><div class="line">&#123;</div><div class="line"><span class="comment">// 初始化with condition</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithCondition:(<span class="built_in">NSInteger</span>)condition <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line"><span class="comment">// 注意是只读的</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> condition;</div><div class="line"><span class="comment">// 如果满足条件(*成员变量condition*==*参数变量condition*)则成功获取锁</span></div><div class="line">- (<span class="keyword">void</span>)lockWhenCondition:(<span class="built_in">NSInteger</span>)condition;</div><div class="line"><span class="comment">// 释放锁，并且让**设置新的condition值**</span></div><div class="line">- (<span class="keyword">void</span>)unlockWithCondition:(<span class="built_in">NSInteger</span>)condition;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>样例代码：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSThread</span> *producerThread;</div><div class="line">    <span class="built_in">NSThread</span> *consumerThread;</div><div class="line">    <span class="built_in">NSConditionLock</span> *plock;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    producerThread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(producerRun) object:<span class="literal">nil</span>];</div><div class="line">    consumerThread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(consumerRun) object:<span class="literal">nil</span>];</div><div class="line">    plock = [[<span class="built_in">NSConditionLock</span> alloc] initWithCondition:<span class="number">0</span>];</div><div class="line">    </div><div class="line">    [producerThread start];</div><div class="line">    [consumerThread start];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)producerRun</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">TRUE</span>)</div><div class="line">    &#123;</div><div class="line">        [plock lockWhenCondition:<span class="number">0</span>];</div><div class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"制造了一个产品"</span>);</div><div class="line">        [plock unlockWithCondition:<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)consumerRun</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">TRUE</span>)</div><div class="line">    &#123;</div><div class="line">        [plock lockWhenCondition:<span class="number">1</span>];</div><div class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"消费了一个产品"</span>);</div><div class="line">        [plock unlockWithCondition:<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>制造了一个产品<br>消费了一个产品<br>制造了一个产品<br>消费了一个产品<br>制造了一个产品<br>消费了一个产品</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手绘图导航]]></title>
      <url>https://troyz.github.io/2016/09/01/%E6%89%8B%E7%BB%98%E5%9B%BE%E5%AF%BC%E8%88%AA/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>通常在项目中需要用到地图的时候我们会选择百度、高德等地图；但有的时候客户会要求提供基于手绘图的定位、导游导览功能，<a href="http://lbsyun.baidu.com/index.php?title=iossdk/guide/basicmap#.E7.93.A6.E7.89.87.E5.9B.BE.E5.B1.82" target="_blank" rel="external">百度-瓦片图层</a>、<a href="http://lbs.amap.com/api/ios-sdk/guide/mapkit/" target="_blank" rel="external">高德-图片覆盖物</a>提供了相应的解决方案，我们可以把手绘图作为瓦片、覆盖物放在地图上，但是这种方案有其局限性：必须依托百度、高德地图本身才能查看手绘图。</p>
<p>接下来我将为大家带来另外一种解决方案，纯手绘图导游导览、定位，先看效果图：</p>
<p><img src="https://github.com/troyz/images/raw/master/store/2016-05-05_21_21_20.gif" alt="手绘图导游导览"></p>
<h3 id="NAMapKit"><a href="#NAMapKit" class="headerlink" title="NAMapKit"></a>NAMapKit</h3><p><a href="https://github.com/neilang/NAMapKit" target="_blank" rel="external">NAMapKit</a>是一个开源的手绘图框架，支持缩放、地图标记、高清地图切片浏览、本地手绘图、在线手绘图功能。</p>
<p><img src="https://github.com/neilang/NAMapKit/raw/master/Demo/Screenshots/namapkit.gif" alt="NAMapKit Demo"></p>
<h3 id="Popup-Menu"><a href="#Popup-Menu" class="headerlink" title="Popup Menu"></a>Popup Menu</h3><p>默认情况下NAMapKit的标记点弹出框不够nice，所以我在github上fork了<a href="https://github.com/troyz/NAMapKit" target="_blank" rel="external">NAMapKit</a>，并实现了与<a href="https://itunes.apple.com/cn/app/city-guides-by-national-geographic/id592453480?mt=8" target="_blank" rel="external">City Guides by National Geographic</a>这款App中类似的功能：<br><img src="https://github.com/troyz/NAMapKit/raw/master/Demo/Screenshots/namapkit2.gif" alt="Fork NAMapKit on github"></p>
<p>### 标记点</p>
<h5 id="普通点标记"><a href="#普通点标记" class="headerlink" title="普通点标记"></a>普通点标记</h5><p>普通点的标记可以直接用尺子在手绘图上量一下，拿到目标点的CGPoint(x,y)，之后把这个point作为<code>NAPinAnnotation</code>添加到地图上，这样就实现了打点的功能。</p>
<h5 id="当前位置打点"><a href="#当前位置打点" class="headerlink" title="当前位置打点"></a>当前位置打点</h5><p>要实现当前位置打点，就得将经纬度坐标转换成图片的平面坐标，以百度地图来说，它提供了以下转换函数：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// BMKGeometry.h</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> *将经纬度坐标转换为投影后的直角地理坐标</div><div class="line"> *@param coordinate 待转换的经纬度坐标</div><div class="line"> *@return 转换后的直角地理坐标</div><div class="line"> */</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> BMKMapPoint BMKMapPointForCoordinate(<span class="built_in">CLLocationCoordinate2D</span> coordinate);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *将投影后的直角地理坐标转换为经纬度坐标</div><div class="line"> *@param mapPoint 投影后的直角地理坐标</div><div class="line"> *@return 转换后的经纬度坐标</div><div class="line"> */</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">CLLocationCoordinate2D</span> BMKCoordinateForMapPoint(BMKMapPoint mapPoint);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里有一个问题：以一个城市为例，在百度地图16、17、18、19等缩放级别下都可以绘制这个城市，但在16、17、18、19级别下画出来的手绘图的尺寸（像素）肯定是不一样的！那么百度地图的直角坐标是以什么为标准呢？</p>
</blockquote>
<ul>
<li>以百度地图18级缩放级别为模板绘出的手绘图，其与百度地图的直角地理坐标是1:1的关系(<strong>zoomRate</strong>)</li>
<li>你可以在百度地图上找一条直线，看这条直线在16、17、18、19级下长度分别是多少，然后以18级的长度为基准，可以计算出每个缩放等级下的比例值(<strong>zoomRate</strong>)</li>
</ul>
<p>所以，如果确定某个经纬度点肯定在当前手绘图中，则可以利用如下公式将<strong>经纬度坐标转换成手绘图的平面坐标</strong>：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果手绘图是以百度地图18级为参照画出来的，则zoomRate为1</span></div><div class="line"><span class="meta">#define zoomRate            1</span></div><div class="line"></div><div class="line"><span class="comment">// 手绘图左上角点的经纬度坐标转换成百度地图的直角坐标</span></div><div class="line">BMKMapPoint leftTopCoor = BMKMapPointForCoordinate(<span class="built_in">CLLocationCoordinate2DMake</span>(lat, lng))</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将经纬度坐标转换成手绘图的平面(像素)坐标</div><div class="line"> */</div><div class="line">- (<span class="built_in">CGPoint</span>)locationCoordToCgPoint:(<span class="built_in">CLLocationCoordinate2D</span>)coor</div><div class="line">&#123;</div><div class="line">    BMKMapPoint point = BMKMapPointForCoordinate(coor);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGPointMake</span>((point.x - leftTopCoor.x) * zoomRate, (point.y - leftTopCoor.y) * zoomRate);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将手绘图的平面(像素)坐标转换成经纬度坐标</div><div class="line"> */</div><div class="line">- (<span class="built_in">CLLocationCoordinate2D</span>)cgPointToLocationCoord:(<span class="built_in">CGPoint</span>)point</div><div class="line">&#123;</div><div class="line">    BMKMapPoint mapPoint;</div><div class="line">    mapPoint.x = point.x / zoomRate + leftTopCoor.x;</div><div class="line">    mapPoint.y = point.y / zoomRate + leftTopCoor.y;</div><div class="line">    <span class="keyword">return</span> BMKCoordinateForMapPoint(mapPoint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="判断给定经纬度是否在当前手绘图视野范围内"><a href="#判断给定经纬度是否在当前手绘图视野范围内" class="headerlink" title="判断给定经纬度是否在当前手绘图视野范围内"></a>判断给定经纬度是否在当前手绘图视野范围内</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 其中imageWidth、imageHeight为手绘图的像素大小（px单位）</span></div><div class="line">- (<span class="built_in">BOOL</span>)isLocationInImage:(<span class="built_in">CLLocationCoordinate2D</span>)coor</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGPoint</span> point = [<span class="keyword">self</span> locationCoordToCgPoint:coor];</div><div class="line">    <span class="keyword">return</span> !(point.x &lt; <span class="number">0</span> || point.y &lt; <span class="number">0</span> || point.x &gt; imageWidth || point.y &gt; imageHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[判断点击、触摸区域是否属于当前UIView]]></title>
      <url>https://troyz.github.io/2016/09/01/%E5%88%A4%E6%96%AD%E7%82%B9%E5%87%BB%E3%80%81%E8%A7%A6%E6%91%B8%E5%8C%BA%E5%9F%9F%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E5%BD%93%E5%89%8DUIView/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>UIView</code>提供了一个<code>pointInside:withEvent:</code>方法，用于判断用户点击的点是否属于当前这个视图，其定义如下：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIView</span></span></div><div class="line"><span class="comment">// default returns YES if point is in bounds</span></div><div class="line">- (<span class="built_in">BOOL</span>)pointInside:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3><p>比如说美工给我们提供了一张圆形的底色透明的png图片，如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/267318-cb186ae5d7c1cd73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/120" alt="圆形透明图片.png"><br>现在要求点击图片上圆形部分可以触发单击事件，点击图片的其它区域不做任何反应，这里有2种方案可以实现：</p>
<h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>把图片做成UIButton，并设置UIButton的<code>layer.cornerRadius</code>为圆形的半径：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"圆形透明图片.png"</span>];</div><div class="line"></div><div class="line"><span class="built_in">UIButton</span> *btnView = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">[btnView setImage:image forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">btnView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, image.size.width, image.size.height);</div><div class="line"><span class="comment">// 设置UIButton为圆形，并且半径与图片半径一致</span></div><div class="line">btnView.layer.cornerRadius = image.size.width / <span class="number">2.0</span>;</div><div class="line">btnView.clipsToBounds = <span class="literal">YES</span>;</div><div class="line">[btnView addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonTapped) </div><div class="line">              forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div></pre></td></tr></table></figure></p>
<h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5><p>用<code>pointInside:withEvent:</code>来实现<br>先为UIButton定义一个扩展<code>UIButton (Circle)</code>，用于设置圆形图片半径，并重写<code>pointInside:withEvent:</code>方法<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span> (<span class="title">Circle</span>)</span></div><div class="line"><span class="comment">// 设置图片的圆角半径</span></div><div class="line">- (<span class="keyword">void</span>)setCornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"UIButton+Circle.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"objc/runtime.h"</span></span></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> cornerRadiusKey;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIButton</span> (<span class="title">Circle</span>)</span></div><div class="line">- (<span class="keyword">void</span>)setCornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius</div><div class="line">&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;cornerRadiusKey, [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%f"</span>, cornerRadius], OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">CGFloat</span>)getCornerRadius</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *str = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;cornerRadiusKey);</div><div class="line">    <span class="keyword">return</span> (str &amp;&amp; str.length) ? [str floatValue] : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 计算point点与center点的距离，</div><div class="line"> * 如果 &lt;= cornerRadius，则表示点击了图片的内容区域，视为有有效点击</div><div class="line"> * 如果 &gt; cornerRadius， 则表示点击了图片的空白区域，视为无效点击</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)pointInside:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGPoint</span> center = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.bounds.size.width / <span class="number">2.0</span>, <span class="keyword">self</span>.bounds.size.height / <span class="number">2.0</span>);</div><div class="line">    <span class="built_in">CGFloat</span> distance = sqrt(pow(point.x - center.x, <span class="number">2</span>) + pow(point.y - center.y, <span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span> distance &lt;= [<span class="keyword">self</span> getCornerRadius];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>下面是使用方式，：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"圆形透明图片.png"</span>];</div><div class="line">    <span class="built_in">UIButton</span> *btnView = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">    [btnView setImage:image forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    btnView.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, image.size.width, image.size.height);</div><div class="line">    <span class="comment">// 设置半径</span></div><div class="line">    [btnView setCornerRadius:image.size.width / <span class="number">2.0</span>];</div><div class="line">    [btnView addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonTapped)</div><div class="line">                  forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">   </div><div class="line">    [<span class="keyword">self</span>.view addSubview:btnView];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)buttonTapped</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"button tapped"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>运行后可以看到：</p>
<ul>
<li>当点击了图片内容区域，则会触发<code>buttonTapped</code>方法</li>
<li>当点击了图片的空白区域，没有任何反应。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th></th>
<th>方案1</th>
<th>方案2</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>优点</strong></td>
<td>代码简单，适用广</td>
<td>处理比较灵活</td>
</tr>
<tr>
<td><strong>缺点</strong></td>
<td>有些特殊情况处理不了</td>
<td>稍显复杂，适用于一些特殊情况</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[anchorPoint、position、transform]]></title>
      <url>https://troyz.github.io/2016/09/01/anchorPoint%E3%80%81position%E3%80%81transform/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>anchorPoint</code>为<code>UIView</code>的中心点，它是一个比例值，默认是CGPointMake(0.5, 0.5)，即视图的中心点在长度、宽度的一半的位置。</p>
<p><code>position</code>为<code>anchorPoint</code>点在其<code>superLayer</code>中的位置</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CALayer</span></span></div><div class="line"><span class="comment">/* The position in the superlayer that the anchor point of the layer's</span></div><div class="line"> * bounds rect is aligned to. Defaults to the zero point. Animatable. */</div><div class="line"><span class="keyword">@property</span> <span class="built_in">CGPoint</span> position;</div><div class="line"></div><div class="line"><span class="comment">/* Defines the anchor point of the layer's bounds rect, as a point in</span></div><div class="line"> * normalized layer coordinates - '(0, 0)' is the bottom left corner of</div><div class="line"> * the bounds rect, '(1, 1)' is the top right corner. Defaults to</div><div class="line"> * '(0.5, 0.5)', i.e. the center of the bounds rect. Animatable. */</div><div class="line"><span class="keyword">@property</span> <span class="built_in">CGPoint</span> anchorPoint;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="默认anchorPoint演示"><a href="#默认anchorPoint演示" class="headerlink" title="默认anchorPoint演示"></a>默认anchorPoint演示</h1><p><img src="http://upload-images.jianshu.io/upload_images/267318-835daf3d9282e498.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="默认情况绕中心点旋转"></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define kScreenWidth                    [[UIScreen mainScreen] bounds].size.width</span></div><div class="line"><span class="meta">#define kScreenHeight                   [[UIScreen mainScreen] bounds].size.height</span></div><div class="line"></div><div class="line"><span class="meta">#define VIEW_WIDTH                      150     // 矩形视图的宽度</span></div><div class="line"><span class="meta">#define VIEW_HEIGHT                     80     // 矩形视图的高度</span></div><div class="line"><span class="meta">#define POINT_W_H                       5       // 中心点的宽、高</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    [<span class="keyword">self</span> addView1];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)addView1</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 创建一个矩形视图</span></div><div class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>((kScreenWidth - VIEW_WIDTH) / <span class="number">2.0</span>, <span class="number">60</span>, VIEW_WIDTH, VIEW_HEIGHT)];</div><div class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">    </div><div class="line">    <span class="comment">// 在上面矩形视图的anchorPoint位置添加一个黑色圆心</span></div><div class="line">    <span class="built_in">CGPoint</span> anchorPoint = view.layer.anchorPoint;</div><div class="line">    <span class="built_in">UIView</span> *pointView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(anchorPoint.x * VIEW_WIDTH - POINT_W_H / <span class="number">2.0</span>, anchorPoint.y * VIEW_HEIGHT - POINT_W_H / <span class="number">2.0</span>, POINT_W_H, POINT_W_H)];</div><div class="line">    pointView.layer.cornerRadius = POINT_W_H / <span class="number">2.0</span>;</div><div class="line">    pointView.clipsToBounds = <span class="literal">YES</span>;</div><div class="line">    pointView.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    [view addSubview:pointView];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.view addSubview:view];</div><div class="line">    </div><div class="line">    <span class="comment">// 旋转view，每次30度</span></div><div class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(rotateView:) withObject:view afterDelay:<span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)rotateView:(<span class="built_in">UIView</span> *)view</div><div class="line">&#123;</div><div class="line">    view.transform = <span class="built_in">CGAffineTransformRotate</span>(view.transform, M_PI / <span class="number">6.0</span>);</div><div class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(rotateView:) withObject:view afterDelay:<span class="number">0.5</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="修改archorPoint后旋转"><a href="#修改archorPoint后旋转" class="headerlink" title="修改archorPoint后旋转"></a>修改archorPoint后旋转</h1><p><img src="http://upload-images.jianshu.io/upload_images/267318-233942fb3a0e68d0.jpg?imageMogr2/auto-orient/strip" alt="修改archorPoint为CGPoint(0.5,0)再旋转"></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addView2</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 创建一个矩形视图</span></div><div class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>((kScreenWidth - VIEW_WIDTH) / <span class="number">2.0</span>, <span class="number">250</span>, VIEW_WIDTH, VIEW_HEIGHT)];</div><div class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> lightGrayColor];</div><div class="line">    </div><div class="line">    <span class="comment">// 修改anchorPoint为顶端中心点</span></div><div class="line">    view.layer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 在上面矩形视图的anchorPoint位置添加一个黑色圆心</span></div><div class="line">    <span class="built_in">CGPoint</span> anchorPoint = view.layer.anchorPoint;</div><div class="line">    <span class="built_in">UIView</span> *pointView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(anchorPoint.x * VIEW_WIDTH - POINT_W_H / <span class="number">2.0</span>, anchorPoint.y * VIEW_HEIGHT - POINT_W_H / <span class="number">2.0</span>, POINT_W_H, POINT_W_H)];</div><div class="line">    pointView.layer.cornerRadius = POINT_W_H / <span class="number">2.0</span>;</div><div class="line">    pointView.clipsToBounds = <span class="literal">YES</span>;</div><div class="line">    pointView.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    [view addSubview:pointView];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.view addSubview:view];</div><div class="line">    </div><div class="line">    <span class="comment">// 旋转view，每次30度</span></div><div class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(rotateView:) withObject:view afterDelay:<span class="number">3</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="诡异动画演示"><a href="#诡异动画演示" class="headerlink" title="诡异动画演示"></a>诡异动画演示</h1><p>代码本身是期望点击button后，通过设置view的frame来让view发生位移，但却出现了诡异动画：<br><img src="http://upload-images.jianshu.io/upload_images/267318-5306a6ed20118a0d.jpg?imageMogr2/auto-orient/strip" alt="诡异动画演示"></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addView3</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 创建一个正方形视图</span></div><div class="line">    squareView1 = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>((kScreenWidth - VIEW_HEIGHT) / <span class="number">2.0</span>, <span class="number">430</span>, VIEW_HEIGHT, VIEW_HEIGHT)];</div><div class="line">    squareView1.backgroundColor = [<span class="built_in">UIColor</span> magentaColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:squareView1];</div><div class="line">    </div><div class="line">    <span class="comment">// 旋转30度</span></div><div class="line">    squareView1.transform = <span class="built_in">CGAffineTransformRotate</span>(squareView1.transform, M_PI / <span class="number">6.0</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">UIButton</span> *btnView = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</div><div class="line">    [btnView setTitle:<span class="string">@"修改view的位置"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    btnView.titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">12.0</span>];</div><div class="line">    btnView.frame = <span class="built_in">CGRectMake</span>(kScreenWidth - <span class="number">120</span>, squareView1.center.y - <span class="number">22</span>, <span class="number">120</span>, <span class="number">44</span>);</div><div class="line">    [btnView addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(updateViewOrigin) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:btnView];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 修改frame造成诡异动画</span></div><div class="line">- (<span class="keyword">void</span>)updateViewOrigin</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGRect</span> frame = squareView1.frame;</div><div class="line">    frame.origin.y -= <span class="number">15</span>;</div><div class="line">    frame.origin.x -= <span class="number">15</span>;</div><div class="line">    squareView1.frame = frame;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>出现如下诡异动画的原因是：如果view已经设置了<code>transform</code>动画，则不要再试图设置<code>frame</code>，而应该用<code>bounds</code>+<code>center</code></p>
<blockquote>
<p>do not use frame if view is transformed since it will not correctly reflect the actual location of the view. use bounds + center instead.</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIView</span>(<span class="title">UIViewGeometry</span>)</span></div><div class="line"><span class="comment">// animatable. do not use frame if view is transformed since it will not correctly reflect the actual location of the view. use bounds + center instead.</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGRect</span>            frame;</div><div class="line"></div><div class="line"><span class="comment">// use bounds/center and not frame if non-identity transform. if bounds dimension is odd, center may be have fractional part</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGRect</span>            bounds;      <span class="comment">// default bounds is zero origin, frame size. animatable</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGPoint</span>           center;      <span class="comment">// center is center of frame. animatable</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGAffineTransform</span> transform;   <span class="comment">// default is CGAffineTransformIdentity. animatable</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="规避诡异动画"><a href="#规避诡异动画" class="headerlink" title="规避诡异动画"></a>规避诡异动画</h1><p>通过设置<code>center</code>来移动view：<br><img src="http://upload-images.jianshu.io/upload_images/267318-eb26138efc90a6e5.jpg?imageMogr2/auto-orient/strip" alt="规避诡异动画"></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addView4</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 创建一个正方形视图</span></div><div class="line">    squareView2 = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>((kScreenWidth - VIEW_HEIGHT) / <span class="number">2.0</span>, <span class="number">550</span>, VIEW_HEIGHT, VIEW_HEIGHT)];</div><div class="line">    squareView2.backgroundColor = [<span class="built_in">UIColor</span> magentaColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:squareView2];</div><div class="line">    </div><div class="line">    <span class="comment">// 旋转30度</span></div><div class="line">    squareView2.transform = <span class="built_in">CGAffineTransformRotate</span>(squareView2.transform, M_PI / <span class="number">6.0</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">UIButton</span> *btnView = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</div><div class="line">    [btnView setTitle:<span class="string">@"修改view的位置"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    btnView.titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">12.0</span>];</div><div class="line">    btnView.frame = <span class="built_in">CGRectMake</span>(kScreenWidth - <span class="number">120</span>, squareView2.center.y - <span class="number">22</span>, <span class="number">120</span>, <span class="number">44</span>);</div><div class="line">    [btnView addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(updateViewCenter) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:btnView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateViewCenter</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGPoint</span> center = squareView2.center;</div><div class="line">    center.x -= <span class="number">15</span>;</div><div class="line">    center.y -= <span class="number">15</span>;</div><div class="line">    squareView2.center = center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考文章：<br><a href="http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/" target="_blank" rel="external">彻底理解position与anchorPoint</a><br><a href="http://blog.csdn.net/ouyangtianhan/article/details/17510009" target="_blank" rel="external">Bug:iOS-改变view的frame后，设置transform，诡异画面</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIImage圆形]]></title>
      <url>https://troyz.github.io/2016/09/01/UIImage%E5%9C%86%E5%BD%A2/</url>
      <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span> (<span class="title">RoundedCorner</span>)</span></div><div class="line">- (<span class="built_in">UIImage</span> *)roundedCornerImageWithCornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">RoundedCorner</span>)</span></div><div class="line">- (<span class="built_in">UIImage</span> *)roundedCornerImageWithCornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGFloat</span> w = <span class="keyword">self</span>.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> h = <span class="keyword">self</span>.size.height;</div><div class="line">    <span class="built_in">CGFloat</span> scale = [<span class="built_in">UIScreen</span> mainScreen].scale;</div><div class="line">    <span class="comment">// 防止圆角半径小于0，或者大于宽/高中较小值的一半。</span></div><div class="line">    <span class="keyword">if</span> (cornerRadius &lt; <span class="number">0</span>)</div><div class="line">        cornerRadius = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cornerRadius &gt; MIN(w, h))</div><div class="line">        cornerRadius = MIN(w, h) / <span class="number">2.</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> *image = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">CGRect</span> imageFrame = <span class="built_in">CGRectMake</span>(<span class="number">0.</span>, <span class="number">0.</span>, w, h);</div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.size, <span class="literal">NO</span>, scale);</div><div class="line">    [[<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:imageFrame cornerRadius:cornerRadius] addClip];</div><div class="line">    [<span class="keyword">self</span> drawInRect:imageFrame];</div><div class="line">    image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS 图片]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS-%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.ibireme.com/2015/11/02/ios_image_tips/" target="_blank" rel="external">iOS 处理图片的一些小 Tip</a></p>
<p><a href="http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/" target="_blank" rel="external">移动端图片格式调研</a></p>
<p><a href="https://github.com/ibireme/YYText" target="_blank" rel="external">YYText富文本显示</a></p>
<p><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS UIAlertView消失后键盘重新弹出问题]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS-UIAlertView%E6%B6%88%E5%A4%B1%E5%90%8E%E9%94%AE%E7%9B%98%E9%87%8D%E6%96%B0%E5%BC%B9%E5%87%BA%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>最近在项目中发现一个小问题：手机当前界面有一些输入框，</p>
<ul>
<li>1.点击确定按钮后-&gt;</li>
<li>2.代码隐藏键盘-&gt;</li>
<li>3.提交数据到服务端-&gt;</li>
<li>4.服务端返回结果-&gt;</li>
<li>5.弹出UIAlertView呈现结果-&gt;</li>
<li>6.用户点击UIAlertView中的按钮-&gt;</li>
<li>7.Dismiss UIAlertView-&gt;</li>
<li>8.<strong>键盘诡异的又自动弹出来了</strong></li>
</ul>
<p>简单来说是<strong>过程2到过程7的时间太过短暂</strong>造成的，无语了~~。</p>
<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h2 id="iOS8"><a href="#iOS8" class="headerlink" title="iOS8+"></a>iOS8+</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">But since iOS 8, I suggest to use the UIAlertController instead of UIAlertView.</div></pre></td></tr></table></figure>
<h2 id="继续用UIAlertView"><a href="#继续用UIAlertView" class="headerlink" title="继续用UIAlertView"></a>继续用UIAlertView</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// you must put around .6 second gap in hiding keyboard and presenting alert</span></div><div class="line"><span class="comment">// 隐藏键盘后延迟0.6秒弹出UIAlertView</span></div><div class="line">[YOUR_TEXT resignFirstResponder];</div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">.6</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">      _alertVw = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@""</span> message:<span class="string">@"message."</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"Ok"</span> otherButtonTitles:<span class="literal">nil</span>, <span class="literal">nil</span>];</div><div class="line">      [_alertVw show];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>参考 <a href="http://stackoverflow.com/questions/30498972/keyboard-will-appeared-automatically-in-ios-8-3-while-displaying-alertview-or-al" target="_blank" rel="external">Keyboard will appeared automatically in ios 8.3 while displaying alertview or alertcontroller</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS UITableView 刷新]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS-UITableView-%E5%88%B7%E6%96%B0/</url>
      <content type="html"><![CDATA[<h1 id="UITableView常用的刷新方式"><a href="#UITableView常用的刷新方式" class="headerlink" title="UITableView常用的刷新方式"></a>UITableView常用的刷新方式</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UITableView.h</span></div><div class="line"></div><div class="line"><span class="comment">// 方式1：刷新整个table</span></div><div class="line">- (<span class="keyword">void</span>)reloadData;</div><div class="line"></div><div class="line"><span class="comment">// 方式2：刷新指定的cells</span></div><div class="line">- (<span class="keyword">void</span>)reloadRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths </div><div class="line">              withRowAnimation:(<span class="built_in">UITableViewRowAnimation</span>)animation;</div><div class="line"></div><div class="line"><span class="comment">// 方式3：多个insert/delete批量事务处理</span></div><div class="line">- (<span class="keyword">void</span>)beginUpdates;   <span class="comment">// allow multiple insert/delete of rows and sections to be animated simultaneously. Nestable</span></div><div class="line">- (<span class="keyword">void</span>)endUpdates;     <span class="comment">// only call insert/delete/reload calls or change the editing state inside an update block.  otherwise things like row count, etc. may be invalid.</span></div></pre></td></tr></table></figure>
<ul>
<li><code>方式1</code>会刷新整个<code>table</code>，一般情况下不建议使用</li>
<li>当<code>cell</code>显示的数据需要发生变化时，通常采用<code>方式2</code>：只刷新指定的<code>cell(s)</code>，对<code>table</code>中的其它<code>cell</code>不会产生影响。</li>
<li>当<code>insert</code>/<code>delete</code> <code>cell</code>的时候，一般使用<code>方式3</code>，</li>
</ul>
<h1 id="单个Cell的局部刷新"><a href="#单个Cell的局部刷新" class="headerlink" title="单个Cell的局部刷新"></a>单个Cell的局部刷新</h1><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>我们现在有一个cell，需要显示如下3类信息：</p>
<ul>
<li>用户基本信息：昵称、性别、头像、</li>
<li>用户的粉丝数量</li>
<li>用户的关注数量</li>
<li><em>以上3类信息的数据由服务端提供了3个不同的接口调用。</em></li>
</ul>
<p>要将这个cell的数据显示完全，需要进行3次接口调用，如果按照<code>方式2</code>则需要将<code>cell</code>刷新3次！！！如下我将介绍一种<code>cell</code>局部刷新的方式：</p>
<h3 id="cell局部刷新"><a href="#cell局部刷新" class="headerlink" title="cell局部刷新"></a>cell局部刷新</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 更新用户基本信息</span></div><div class="line">[cell updateBasicView];</div><div class="line">[tableView beginUpdate];</div><div class="line">[tableView endUpdate];</div><div class="line"></div><div class="line"><span class="comment">// 更新用户粉丝数量</span></div><div class="line">[cell updateFansView];</div><div class="line">[tableView beginUpdate];</div><div class="line">[tableView endUpdate];</div><div class="line"></div><div class="line"><span class="comment">// 更新用户关注数量</span></div><div class="line">[cell updateFollowView];</div><div class="line">[tableView beginUpdate];</div><div class="line">[tableView endUpdate];</div></pre></td></tr></table></figure>
<p>这样<code>cell</code>就做到了局部刷新，是不是很简单？！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS自动打包ipa（shell脚本）]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85ipa%EF%BC%88shell%E8%84%9A%E6%9C%AC%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h3><p><a href="http://www.jianshu.com/p/683f1bb610a4" target="_blank" rel="external">iOS自动打包ipa（shell脚本）</a><br><a href="http://www.jianshu.com/p/e55f76385ed9" target="_blank" rel="external">iOS自动打包ipa（Python脚本）</a></p>
<h3 id="安装xctool"><a href="#安装xctool" class="headerlink" title="安装xctool"></a>安装<a href="https://github.com/facebook/xctool" target="_blank" rel="external">xctool</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install xctool</div></pre></td></tr></table></figure>
<h3 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 将脚本保存到iOS项目的根目录</div><div class="line">$ <span class="built_in">cd</span> <span class="variable">$iOS</span>项目目录</div><div class="line">$ vim build_using_xctool.sh</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> &lt; 1 ]]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"请输入更新日志"</span></div><div class="line">  <span class="built_in">exit</span> 2</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#计时</span></div><div class="line">SECONDS=0</div><div class="line"></div><div class="line"><span class="comment">#假设脚本放置在与项目相同的路径下</span></div><div class="line">project_path=$(<span class="built_in">pwd</span>)</div><div class="line"><span class="comment">#取当前时间字符串添加到文件结尾</span></div><div class="line">now=$(date +<span class="string">"%Y_%m_%d_%H_%M_%S"</span>)</div><div class="line"></div><div class="line"><span class="comment">#指定项目的scheme名称</span></div><div class="line">scheme=<span class="string">"******"</span></div><div class="line"><span class="comment">#指定要打包的配置名</span></div><div class="line">configuration=<span class="string">"Release"</span></div><div class="line"><span class="comment">#指定打包所使用的provisioning profile名称</span></div><div class="line">provisioning_profile=<span class="string">'******'</span></div><div class="line"></div><div class="line"><span class="comment">#指定项目地址</span></div><div class="line">workspace_path=<span class="string">"<span class="variable">$project_path</span>/******.xcworkspace"</span></div><div class="line"><span class="comment">#指定输出路径</span></div><div class="line">output_path=<span class="string">"******"</span></div><div class="line"><span class="comment">#指定输出归档文件地址</span></div><div class="line">archive_path=<span class="string">"<span class="variable">$output_path</span>/******<span class="variable">$&#123;now&#125;</span>.xcarchive"</span></div><div class="line"><span class="comment">#指定输出ipa地址</span></div><div class="line">ipa_path=<span class="string">"<span class="variable">$output_path</span>/******<span class="variable">$&#123;now&#125;</span>.ipa"</span></div><div class="line"></div><div class="line"><span class="comment">#输出设定的变量值</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"===workspace path: <span class="variable">$&#123;workspace_path&#125;</span>==="</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"===archive path: <span class="variable">$&#123;archive_path&#125;</span>==="</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"===ipa path: <span class="variable">$&#123;ipa_path&#125;</span>==="</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"===profile: <span class="variable">$&#123;provisioning_profile&#125;</span>==="</span></div><div class="line"></div><div class="line"><span class="comment">#先清空前一次build</span></div><div class="line">xctool clean -workspace <span class="variable">$&#123;workspace_path&#125;</span> -scheme <span class="variable">$&#123;scheme&#125;</span> -configuration <span class="variable">$&#123;configuration&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#根据指定的项目、scheme、configuration与输出路径打包出archive文件</span></div><div class="line">xctool build -workspace <span class="variable">$&#123;workspace_path&#125;</span> -scheme <span class="variable">$&#123;scheme&#125;</span> -configuration <span class="variable">$&#123;configuration&#125;</span> archive -archivePath <span class="variable">$&#123;archive_path&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#使用指定的provisioning profile导出ipa</span></div><div class="line"><span class="comment">#我暂时没找到xctool指定provisioning profile的方法，所以这里用了xcodebuild</span></div><div class="line">xcodebuild -exportArchive -archivePath <span class="variable">$&#123;archive_path&#125;</span> -exportPath <span class="variable">$&#123;ipa_path&#125;</span> -exportFormat ipa -exportProvisioningProfile <span class="string">"<span class="variable">$&#123;provisioning_profile&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"===upload .ipa to PGYER==="</span></div><div class="line"><span class="comment">#上传.ipa到蒲公英，参数`updateDescription`是更新日志</span></div><div class="line"><span class="comment">#参数请查阅：https://www.pgyer.com/doc/api#uploadApp</span></div><div class="line">curl -F <span class="string">"file=@<span class="variable">$&#123;ipa_path&#125;</span>"</span> -F <span class="string">"uKey=******"</span> -F <span class="string">"_api_key=******"</span> -F <span class="string">"updateDescription=<span class="variable">$1</span>"</span> http://www.pgyer.com/apiv1/app/upload</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment">#输出总用时</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"===Finished. Total time: <span class="variable">$&#123;SECONDS&#125;</span>s==="</span></div><div class="line"></div><div class="line"><span class="comment">#通知</span></div><div class="line">osascript <span class="_">-e</span> <span class="string">'display notification "打包上传蒲公英成功！" with title "任务完成"'</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//让脚本可以被执行</div><div class="line">$ chmod a+x build_using_xctool.sh</div></pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="variable">$iOS</span>项目目录</div><div class="line"></div><div class="line">// 引号(<span class="string">""</span>)中的内容会被作为更新日志提交到蒲公英网站，如果希望日志换行，则在控制台键入Enter符</div><div class="line">$ ./build_using_xctool.sh <span class="string">"2016年8月4号，</span></div><div class="line">&gt;1，修复部分页面bugs"</div></pre></td></tr></table></figure>
<blockquote>
<p>参考文章：<a href="http://www.jianshu.com/p/54ab07f2e63b" target="_blank" rel="external">http://www.jianshu.com/p/54ab07f2e63b</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS自动打包ipa（Python脚本）]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85ipa%EF%BC%88Python%E8%84%9A%E6%9C%AC%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h3><p><a href="http://www.jianshu.com/p/683f1bb610a4" target="_blank" rel="external">iOS自动打包ipa（shell脚本）</a><br><a href="http://www.jianshu.com/p/e55f76385ed9" target="_blank" rel="external">iOS自动打包ipa（Python脚本）</a></p>
<h3 id="安装Python库"><a href="#安装Python库" class="headerlink" title="安装Python库"></a>安装Python库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install requests</div></pre></td></tr></table></figure>
<h3 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> iOS项目目录</div><div class="line">$ vim build_using_python.py</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment"># -*- coding:utf8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment">#configuration for iOS build setting</span></div><div class="line">CODE_SIGN_IDENTITY = <span class="string">"iPhone Distribution:************.,Ltd"</span></div><div class="line">PROVISIONING_PROFILE = <span class="string">"************"</span></div><div class="line">CONFIGURATION = <span class="string">"Release"</span></div><div class="line">SDK = <span class="string">"iphoneos"</span></div><div class="line">WORKSPACE = <span class="string">"******.xcworkspace"</span></div><div class="line">TARGET = <span class="string">"******"</span></div><div class="line">SCHEME = <span class="string">"******"</span></div><div class="line"></div><div class="line"><span class="comment"># configuration for pgyer</span></div><div class="line">PGYER_UPLOAD_URL = <span class="string">"http://www.pgyer.com/apiv1/app/upload"</span></div><div class="line">DOWNLOAD_BASE_URL = <span class="string">"http://www.pgyer.com"</span></div><div class="line">USER_KEY = <span class="string">"************"</span></div><div class="line">API_KEY = <span class="string">"************"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanBuildDir</span><span class="params">(buildDir)</span>:</span></div><div class="line">  cleanCmd = <span class="string">"rm -r %s"</span> %(buildDir)</div><div class="line">  process = subprocess.Popen(cleanCmd, shell = <span class="keyword">True</span>)</div><div class="line">  process.wait()</div><div class="line">  <span class="keyword">print</span> <span class="string">"cleaned buildDir: %s"</span> %(buildDir)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parserUploadResult</span><span class="params">(jsonResult)</span>:</span></div><div class="line">  resultCode = jsonResult[<span class="string">'code'</span>]</div><div class="line">  <span class="keyword">if</span> resultCode == <span class="number">0</span>:</div><div class="line">    downUrl = DOWNLOAD_BASE_URL +<span class="string">"/"</span>+jsonResult[<span class="string">'data'</span>][<span class="string">'appShortcutUrl'</span>]</div><div class="line">    <span class="keyword">print</span> <span class="string">"Upload Success"</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"DownUrl is:"</span> + downUrl</div><div class="line">    showNotification(<span class="string">"任务完成!"</span>, <span class="string">"Upload Success!"</span>);</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Upload Fail!"</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Reason:"</span>+jsonResult[<span class="string">'message'</span>]</div><div class="line">    showNotification(<span class="string">"Upload failure!"</span>, <span class="string">"Reason:"</span>+jsonResult[<span class="string">'message'</span>]);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadIpaToPgyer</span><span class="params">(ipaPath, comments)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"ipaPath:"</span>+ipaPath</div><div class="line">    files = &#123;<span class="string">'file'</span>: open(ipaPath, <span class="string">'rb'</span>)&#125;</div><div class="line">    headers = &#123;<span class="string">'enctype'</span>:<span class="string">'multipart/form-data'</span>&#125;</div><div class="line">    payload = &#123;<span class="string">'uKey'</span>:USER_KEY,<span class="string">'_api_key'</span>:API_KEY,<span class="string">'updateDescription'</span>:comments&#125;</div><div class="line">    <span class="keyword">print</span> <span class="string">"uploading...."</span></div><div class="line">    r = requests.post(PGYER_UPLOAD_URL, data = payload ,files=files,headers=headers)</div><div class="line">    <span class="keyword">if</span> r.status_code == requests.codes.ok:</div><div class="line">         result = r.json()</div><div class="line">         parserUploadResult(result)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'HTTPError,Code:'</span>+r.status_code</div><div class="line">        showNotification(<span class="string">"Upload failure!"</span>, <span class="string">'HTTPError,Code:'</span>+r.status_code);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildProject</span><span class="params">(project, target, output, comments)</span>:</span></div><div class="line">  buildCmd = <span class="string">'xcodebuild -project %s -target %s -sdk %s -configuration %s build CODE_SIGN_IDENTITY="%s" PROVISIONING_PROFILE="%s"'</span> %(project, target, SDK, CONFIGURATION, CODE_SIGN_IDENTITY, PROVISIONING_PROFILE)</div><div class="line">  process = subprocess.Popen(buildCmd, shell = <span class="keyword">True</span>)</div><div class="line">  process.wait()</div><div class="line"></div><div class="line">  signApp = <span class="string">"./build/%s-iphoneos/%s.app"</span> %(CONFIGURATION, target)</div><div class="line">  signCmd = <span class="string">"xcrun -sdk %s -v PackageApplication %s -o %s"</span> %(SDK, signApp, output)</div><div class="line">  process = subprocess.Popen(signCmd, shell=<span class="keyword">True</span>)</div><div class="line">  (stdoutdata, stderrdata) = process.communicate()</div><div class="line"></div><div class="line">  uploadIpaToPgyer(output, comments)</div><div class="line">  cleanBuildDir(<span class="string">"./build"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildWorkspace</span><span class="params">(workspace, scheme, output, comments)</span>:</span></div><div class="line">  cleanWorkspace()</div><div class="line">  process = subprocess.Popen(<span class="string">"pwd"</span>, stdout=subprocess.PIPE)</div><div class="line">  (stdoutdata, stderrdata) = process.communicate()</div><div class="line">  buildDir = stdoutdata.strip() + <span class="string">'/build'</span></div><div class="line">  cleanBuildDir(buildDir)</div><div class="line">  showNotification(<span class="string">"Clean Success!"</span>, <span class="string">"Clean Success! Then Build."</span>)</div><div class="line">  <span class="keyword">print</span> <span class="string">"buildDir: "</span> + buildDir</div><div class="line">  buildCmd = <span class="string">'xcodebuild -workspace %s -scheme %s -sdk %s -configuration %s build CODE_SIGN_IDENTITY="%s" PROVISIONING_PROFILE="%s" SYMROOT=%s'</span> %(workspace, scheme, SDK, CONFIGURATION, CODE_SIGN_IDENTITY, PROVISIONING_PROFILE, buildDir)</div><div class="line">  process = subprocess.Popen(buildCmd, shell = <span class="keyword">True</span>)</div><div class="line">  process.wait()</div><div class="line">  showNotification(<span class="string">"Build Success!"</span>, <span class="string">"Build Success! Then Sign."</span>);</div><div class="line">  signApp = <span class="string">"./build/%s-iphoneos/%s.app"</span> %(CONFIGURATION, scheme)</div><div class="line">  signCmd = <span class="string">"xcrun -sdk %s -v PackageApplication %s -o %s"</span> %(SDK, signApp, output)</div><div class="line">  process = subprocess.Popen(signCmd, shell=<span class="keyword">True</span>)</div><div class="line">  (stdoutdata, stderrdata) = process.communicate()</div><div class="line">  showNotification(<span class="string">"Sign Success!"</span>, <span class="string">"Sign Success! Then upload to pgyer."</span>);</div><div class="line">  uploadIpaToPgyer(output, comments)</div><div class="line">  cleanBuildDir(buildDir)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">showNotification</span><span class="params">(title, subtitle)</span>:</span></div><div class="line">  os.system(<span class="string">"osascript -e 'display notification \""</span> + subtitle + <span class="string">"\" with title \""</span> + title + <span class="string">"\"'"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanWorkspace</span><span class="params">()</span>:</span></div><div class="line">  buildCmd = <span class="string">'xcodebuild clean -workspace '</span> + WORKSPACE + <span class="string">' -scheme '</span> + SCHEME + <span class="string">' -configuration '</span> + CONFIGURATION</div><div class="line">  <span class="keyword">print</span> <span class="string">"clean workspace: "</span> + buildCmd</div><div class="line">  process = subprocess.Popen(buildCmd, shell = <span class="keyword">True</span>)</div><div class="line">  process.wait()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xcbuild</span><span class="params">(options)</span>:</span></div><div class="line">  <span class="comment"># project = options.project</span></div><div class="line">  <span class="comment"># workspace = options.workspace</span></div><div class="line">  <span class="comment"># target = options.target</span></div><div class="line">  <span class="comment"># scheme = options.scheme</span></div><div class="line">  <span class="comment"># output = options.output</span></div><div class="line">  <span class="comment"># ipa输出到桌面</span></div><div class="line">  output = os.path.expanduser(<span class="string">"~"</span>) + <span class="string">'/Desktop/'</span> + TARGET + <span class="string">'.ipa'</span></div><div class="line">  comments = options.comments</div><div class="line"></div><div class="line">  <span class="keyword">if</span> comments <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"请输入更新日志"</span></div><div class="line">  <span class="comment"># elif project is None and workspace is None:</span></div><div class="line">  <span class="comment">#   pass</span></div><div class="line">  <span class="comment"># elif project is not None:</span></div><div class="line">  <span class="comment">#   buildProject(project, target, output, comments)</span></div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    buildWorkspace(WORKSPACE, SCHEME, output, comments)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  </div><div class="line">  parser = OptionParser()</div><div class="line">  <span class="comment"># parser.add_option("-w", "--workspace", help="Build the workspace name.xcworkspace.", metavar="name.xcworkspace")</span></div><div class="line">  <span class="comment"># parser.add_option("-p", "--project", help="Build the project name.xcodeproj.", metavar="name.xcodeproj")</span></div><div class="line">  <span class="comment"># parser.add_option("-s", "--scheme", help="Build the scheme specified by schemename. Required if building a workspace.", metavar="schemename")</span></div><div class="line">  <span class="comment"># parser.add_option("-t", "--target", help="Build the target specified by targetname. Required if building a project.", metavar="targetname")</span></div><div class="line">  <span class="comment"># parser.add_option("-o", "--output", help="specify output filename", metavar="output_filename")</span></div><div class="line">  parser.add_option(<span class="string">"-m"</span>, <span class="string">"--comments"</span>, help=<span class="string">"specify the upgrade comments"</span>, metavar=<span class="string">"upgrade_comments"</span>)</div><div class="line"></div><div class="line">  (options, args) = parser.parse_args()</div><div class="line"></div><div class="line">  <span class="keyword">print</span> <span class="string">"options: %s, args: %s"</span> % (options, args)</div><div class="line"></div><div class="line">  xcbuild(options)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  main()</div></pre></td></tr></table></figure>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>其中，<code>CODE_SIGN_IDENTITY</code><br> 为开发者证书标识，可以在 <code>Keychain Access</code> -&gt; <code>Certificates</code>-&gt; 选中证书右键弹出菜单 -&gt; <code>Get Info</code> -&gt; <code>Common Name</code> 获取，类似 <strong><code>iPhone Distribution: Company name Co. Ltd (xxxxxxxx9A)</code></strong><br>, 包括括号内的内容。</p>
<p><code>PROVISIONING_PROFILE</code><br>: 这个是 <code>mobileprovision</code> 文件的 <code>identifier</code>，获取方式：<br><code>Xcode</code> -&gt; <code>Preferences</code> -&gt; 选中申请开发者证书的 Apple ID -&gt; 选中开发者证书 -&gt; <code>View Details…</code> -&gt; 根据 Provisioning Profiles 的名字选中打包所需的 mobileprovision 文件 -&gt; 右键菜单 -&gt; <code>Show in Finder</code> -&gt; 找到该文件后，<strong>除了该文件后缀名的字符串就是 <code>PROVISIONING_PROFILE</code></strong><br> 字段的内容。</p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python build_using_python.py -m <span class="string">"更新日志"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="http://liumh.com/2015/11/25/ios-auto-archive-ipa/" target="_blank" rel="external">iOS自动打包并发布脚本</a>、<a href="https://github.com/carya/Util.git" target="_blank" rel="external">github</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS App间数据分享(raywenderlich.com)]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS-App%E9%97%B4%E6%95%B0%E6%8D%AE%E5%88%86%E4%BA%AB-raywenderlich-com/</url>
      <content type="html"><![CDATA[<p><a href="https://www.raywenderlich.com/133825/uiactivityviewcontroller-tutorial" target="_blank" rel="external"><img src="https://cdn4.raywenderlich.com/wp-content/uploads/2016/08/SharingData-Feature-250x250.png" alt="UIActivityController is the shiznay!"></a><br><a href="https://www.raywenderlich.com/133825/uiactivityviewcontroller-tutorial" target="_blank" rel="external">UIActivityViewController Tutorial: Sharing Data</a><br>In this UIActivityViewController tutorial, you’ll learn all about giving your users the ability to export their data, and share it with others.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-7660b76285f01c23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="App default page"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-010757088323556f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置Info.plist文件以便Import、Export数据"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-6d55ac0d84dda94e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击邮件附件打开我们的App"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-b819dfc23f9f2765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邮件附件的数据被导入到App"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-cb2278027aeb8e81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="App分享数据，可通过AirDrop分享给安装了App的朋友，对方可以接收并导入数据"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-927da55f9b38954d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过AirDrop分享给对方"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[### 功能简介]]></title>
      <url>https://troyz.github.io/2016/09/01/%E5%8A%9F%E8%83%BD%E7%AE%80%E4%BB%8B/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS Universal Links]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS-Universal-Links/</url>
      <content type="html"><![CDATA[<h3 id="iOS-Universal-Links功能简介"><a href="#iOS-Universal-Links功能简介" class="headerlink" title="iOS Universal Links功能简介"></a><code>iOS Universal Links</code>功能简介</h3><p>举个栗子：用户在手机上通过<code>Safari</code>浏览器查看<code>简书</code>的某篇文章时，会打开用户手机上的<code>简书App</code>并进入到这篇文章，从而实现了<code>从浏览器到App的无缝链接</code></p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>要使用<code>iOS Universal Links</code>功能需要如下前提条件：</p>
<ul>
<li><code>iOS</code> 9+</li>
<li>要有一个网站，并且支持<code>Https</code></li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h5 id="JSON配置文件"><a href="#JSON配置文件" class="headerlink" title="JSON配置文件"></a>JSON配置文件</h5><p>命名为<code>apple-app-site-association</code>的JSON配置文件，放到网站的根目录，可以通过Https访问，以<code>简书</code>为例子<a href="http://jianshu.com/apple-app-site-association" target="_blank" rel="external">http://jianshu.com/apple-app-site-association</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"applinks"</span>: &#123;</div><div class="line">    <span class="string">"apps"</span>: [],</div><div class="line">    <span class="string">"details"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"appID"</span>: <span class="string">"KS7QAPBMXA.com.jianshu.Hugo"</span>,</div><div class="line">        <span class="string">"paths"</span>: [ <span class="string">"/p/*"</span>, <span class="string">"/collection/*"</span>, <span class="string">"/users/*"</span>, <span class="string">"/notebooks/*"</span> ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单解释一下：如果在浏览器中访问的某个简书页面的url匹配<code>paths</code>规则，则尝试打开<code>Team ID</code>为<code>KS7QAPBMXA</code>且<code>Bundle ID</code>为<code>com.jianshu.Hugo</code>的App，并且将url传递给App。</p>
<h5 id="iOS-App-配置"><a href="#iOS-App-配置" class="headerlink" title="iOS App 配置"></a>iOS App 配置</h5><p><img src="http://upload-images.jianshu.io/upload_images/267318-b2affeb20ee0f58d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Domains配置"></p>
<h5 id="iOS接收并处理url参数"><a href="#iOS接收并处理url参数" class="headerlink" title="iOS接收并处理url参数"></a>iOS接收并处理url参数</h5><p><code>AppDelegate</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">import <span class="built_in">UIKit</span></div><div class="line"> </div><div class="line">extension AppDelegate &#123;</div><div class="line">    func application(application: <span class="built_in">UIApplication</span>, continueUserActivity userActivity: <span class="built_in">NSUserActivity</span>, restorationHandler: ([AnyObject]?) -&gt; Void) -&gt; Bool &#123;</div><div class="line">        <span class="keyword">if</span> userActivity.activityType == <span class="built_in">NSUserActivityTypeBrowsingWeb</span> &#123;</div><div class="line">            let webpageURL = userActivity.webpageURL! <span class="comment">// Always exists</span></div><div class="line">            <span class="keyword">if</span> !handleUniversalLink(URL: webpageURL) &#123;</div><div class="line">                <span class="built_in">UIApplication</span>.sharedApplication().openURL(webpageURL)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    private func handleUniversalLink(URL url: <span class="built_in">NSURL</span>) -&gt; Bool &#123;</div><div class="line">        <span class="keyword">if</span> let components = <span class="built_in">NSURLComponents</span>(URL: url, resolvingAgainstBaseURL: <span class="literal">true</span>), let host = components.host, let pathComponents = components.path?.pathComponents &#123;</div><div class="line">            <span class="keyword">switch</span> host &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"domain.com"</span>:</div><div class="line">                <span class="keyword">if</span> pathComponents.count &gt;= <span class="number">4</span> &#123;</div><div class="line">                    <span class="keyword">switch</span> (pathComponents[<span class="number">0</span>], pathComponents[<span class="number">1</span>], pathComponents[<span class="number">2</span>], pathComponents[<span class="number">3</span>]) &#123;</div><div class="line">                    <span class="keyword">case</span> (<span class="string">"/"</span>, <span class="string">"path"</span>, <span class="string">"to"</span>, let something):</div><div class="line">                        <span class="keyword">if</span> validateSomething(something) &#123;</div><div class="line">                            presentSomethingViewController(something)</div><div class="line">                            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">                        &#125;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回<code>true</code>表示处理成功，会打开App并进入到对应的页面；返回<code>false</code>表示处理失败，会停留在Safari页面。</p>
<blockquote>
<p>参考：<a href="http://www.cocoachina.com/ios/20150902/13321.html" target="_blank" rel="external">iOS 9学习系列：打通 iOS 9 的通用链接（Universal Links）</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS Smart App Banners]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS-Smart-App-Banners/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<code>iOS6</code>之后，<code>Safari</code>增加了一项目功能：可以检测手机是否安装了某个App，并且在页面顶部显示一个Banner；<br>如果没有安装App，则Banner显示App的基本信息，点击后进入在<code>App Store</code>下载页面；<br>如果已经安装了App，则Banner显示App的基本信息，点击打开App。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-3fdaf39a0df621e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="未安装App时Banner"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-fdbaa7336026fa6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="已安装时Banner"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>只需要在页面中配置一下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=xxxxxxx"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然，也可以添加参数，点击打开App的时候，会将参数传递给App<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=xxxxxxx, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考：<a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html" target="_blank" rel="external">Promoting Apps with Smart App Banners</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins填坑]]></title>
      <url>https://troyz.github.io/2016/09/01/Jenkins%E5%A1%AB%E5%9D%91/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录使用<code>Jenkins</code>打包<code>iOS</code>过程中所遇到的各种问题</p>
<h3 id="There-are-no-schemes-in-workspace"><a href="#There-are-no-schemes-in-workspace" class="headerlink" title="There are no schemes in workspace"></a>There are no schemes in workspace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ xcodebuild -list -workspace ***.xcworkspace</div><div class="line">There are no schemes in workspace &quot;***&quot;.</div></pre></td></tr></table></figure>
<p>解决方案：<br><img src="http://upload-images.jianshu.io/upload_images/267318-c3dc0eb262074cad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="There are no schemes in workspace"></p>
<h3 id="ResourceRules-plist-cannot-read-resources"><a href="#ResourceRules-plist-cannot-read-resources" class="headerlink" title="ResourceRules.plist: cannot read resources"></a>ResourceRules.plist: cannot read resources</h3><p>解决方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(SDKROOT)/ResourceRules.plist</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-880bd71f0c5fc034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ResourceRules.plist: cannot read resources"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fastlane入门]]></title>
      <url>https://troyz.github.io/2016/09/01/fastlane%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="Appfile"><a href="#Appfile" class="headerlink" title="Appfile"></a><a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md" target="_blank" rel="external">Appfile</a></h3><ul>
<li>在Fastfile中读取<code>Appfile</code>中变量</li>
</ul>
<h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a><a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Advanced.md" target="_blank" rel="external">Advanced</a></h3><ul>
<li>参数传递</li>
<li><code>lane</code>切换</li>
<li>环境变量</li>
<li>执行<code>shell</code>命令</li>
</ul>
<h3 id="match"><a href="#match" class="headerlink" title="match"></a><a href="https://github.com/fastlane/fastlane/tree/master/match" target="_blank" rel="external">match</a></h3><p>只用预先创建一个空的<code>private git repo</code>即可，但是这里有一个坑，<code>git_url</code>必须是<code>ssh</code>协议的才行，<code>https</code>协议的貌似不行。</p>
<p><code>match</code>会先去创建<code>Certificate</code>，就算你的<code>Team</code>下之前已经有证书了（是其他人创建的），<code>match</code>依然会为你创建一个新的证书，并且会创建一个新的<code>Provisioning Profile</code>，命名方式为<code>match AppStore &lt;bundle id&gt;</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS打包错误集锦]]></title>
      <url>https://troyz.github.io/2016/09/01/iOS%E6%89%93%E5%8C%85%E9%94%99%E8%AF%AF%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<h3 id="ERROR-ITMS-90034"><a href="#ERROR-ITMS-90034" class="headerlink" title="ERROR ITMS-90034"></a>ERROR ITMS-90034</h3><p><a href="http://blog.frumar.com/fix-for-xcode-error-itms-90034-missing-or-invalid-signature/" target="_blank" rel="external">fix for xcode ERROR ITMS-90034 – Missing or invalid signature</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-496e8492b6180702.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ERROR ITMS-90034"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-e6d2f219504860ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="`始终信任`改为`使用系统默认`"></p>
<h3 id="ERROR-ITMS-90339"><a href="#ERROR-ITMS-90339" class="headerlink" title="ERROR ITMS-90339"></a>ERROR ITMS-90339</h3><p><a href="http://stackoverflow.com/questions/32504355/error-itms-90339-this-bundle-is-invalid-the-info-plist-contains-an-invalid-ke" target="_blank" rel="external">This bundle is invalid . The info.plist contains an invalid key ‘CFBundleResourceSpecification’ in app bundle</a></p>
<p>Project settings under <code>Build Settings</code> &gt; <code>Code Signing</code> &gt; <code>Code Signing Resource Rules Path</code> - Delete the value for Code Signing Resource Rules Path. That fixed issue for me</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ffmpeg视频压缩]]></title>
      <url>https://troyz.github.io/2016/09/01/ffmpeg%E8%A7%86%E9%A2%91%E5%8E%8B%E7%BC%A9/</url>
      <content type="html"><![CDATA[<p><a href="http://superuser.com/questions/4244/how-do-i-reduce-the-size-of-a-huge-mp4-video" target="_blank" rel="external">How do I reduce the size of a huge MP4 video?</a></p>
<p>You can try using something such as <a href="http://ffmpeg.org/" target="_blank" rel="external">ffmpeg</a> or <a href="http://www.mplayerhq.hu/design7/news.html" target="_blank" rel="external">mencoder</a> to reencode it with a lower bitrate, e.g.:<br>Calculate the bitrate you need by dividing 1 GB by the video length in seconds. So, for a video of length 16:40 (1000 seconds), use a bitrate of 1000000 bytes/sec:</p>
<blockquote>
<p>ffmpeg -i input.mp4 -b 1000000 output.mp4</p>
</blockquote>
<p>Additional options that might be worth considering is setting the <a href="https://trac.handbrake.fr/wiki/CRFGuide" target="_blank" rel="external">Constant Rate Factor</a>, which lowers the average bit rate, but retains better quality. Vary the CRF between around 18 and 24 — the lower, the higher the bitrate.</p>
<blockquote>
<p>ffmpeg -i input.mp4 -vcodec libx264 -crf 20 output.mp4</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ImageMagic压缩jpg图片]]></title>
      <url>https://troyz.github.io/2016/09/01/ImageMagic%E5%8E%8B%E7%BC%A9jpg%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>I use always:</p>
<ul>
<li>quality in 85</li>
<li>progressive (comprobed compression)</li>
<li>a very tiny gausssian blur to optimize the size (0.05 or 0.5 of radius) depends on the quality and size of the picture, this notably optimizes the size of the jpeg.</li>
<li>Strip any comment or exif tag</li>
</ul>
<p>in imagemagick should be<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert -strip -interlace Plane -gaussian-blur 0.05 -quality 85% source.jpg result.jpg</div></pre></td></tr></table></figure></p>
<p>hope this be useful.</p>
<hr>
<blockquote>
<p><a href="http://stackoverflow.com/questions/7261855/recommendation-for-compressing-jpg-files-with-imagemagick" target="_blank" rel="external">http://stackoverflow.com/questions/7261855/recommendation-for-compressing-jpg-files-with-imagemagick</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React Native全屏背景图片]]></title>
      <url>https://troyz.github.io/2016/09/01/React-Native%E5%85%A8%E5%B1%8F%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/29322973/whats-the-best-way-to-add-a-full-screen-background-image-in-react-native" target="_blank" rel="external">What’s the best way to add a full screen background image in React Native</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReactStrap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Image source=&#123;require('image!background')&#125; style=&#123;styles.container&#125;&gt;</div><div class="line">        ... Your Content ...</div><div class="line">      &lt;/Image&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    <span class="comment">// remove width and height to override fixed static size</span></div><div class="line">    width: <span class="literal">null</span>,</div><div class="line">    height: <span class="literal">null</span>,</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React Native隐藏/显示UITabBar]]></title>
      <url>https://troyz.github.io/2016/09/01/React-Native%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BAUITabBar/</url>
      <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RCTTabBar.h</span></div><div class="line">- (<span class="built_in">UITabBar</span> *)tabBar;</div><div class="line"></div><div class="line"><span class="comment">// RCTTabBar.m</span></div><div class="line">- (<span class="built_in">UITabBar</span> *)tabBar</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> _tabController.tabBar;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RCTTabBarManager.m</span></div><div class="line">RCT_EXPORT_METHOD(showTabBar:(<span class="keyword">nonnull</span> <span class="built_in">NSNumber</span> *)reactTag</div><div class="line">                  animated:(<span class="built_in">BOOL</span>)animated)</div><div class="line">&#123;</div><div class="line">  [<span class="keyword">self</span>.bridge.uiManager addUIBlock:</div><div class="line">   ^(__unused RCTUIManager *uiManager, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSNumber</span> *, <span class="built_in">UIView</span> *&gt; *viewRegistry)&#123;</div><div class="line">       RCTTabBar *rctTabBar = viewRegistry[reactTag];</div><div class="line">       <span class="built_in">UITabBar</span> *tabBar = [rctTabBar tabBar];</div><div class="line">       [<span class="keyword">self</span> toggleTabBar:tabBar withShow:<span class="literal">YES</span> withAnimated:animated];</div><div class="line">   &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">RCT_EXPORT_METHOD(hideTabBar:(<span class="keyword">nonnull</span> <span class="built_in">NSNumber</span> *)reactTag</div><div class="line">                  animated:(<span class="built_in">BOOL</span>)animated)</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.bridge.uiManager addUIBlock:</div><div class="line">     ^(__unused RCTUIManager *uiManager, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSNumber</span> *, <span class="built_in">UIView</span> *&gt; *viewRegistry)&#123;</div><div class="line">         RCTTabBar *rctTabBar = viewRegistry[reactTag];</div><div class="line">         <span class="built_in">UITabBar</span> *tabBar = [rctTabBar tabBar];</div><div class="line">         [<span class="keyword">self</span> toggleTabBar:tabBar withShow:<span class="literal">NO</span> withAnimated:animated];</div><div class="line">     &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)toggleTabBar:(<span class="built_in">UITabBar</span> *)tabBar withShow:(<span class="built_in">BOOL</span>)isShow withAnimated:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGFloat</span> screenWidth = [[<span class="built_in">UIScreen</span> mainScreen] bounds].size.width;</div><div class="line">    <span class="built_in">CGFloat</span> screenHeight = [[<span class="built_in">UIScreen</span> mainScreen] bounds].size.height;</div><div class="line">    <span class="built_in">BOOL</span> isCurrentShow = (tabBar.frame.origin.y == (screenHeight - <span class="number">49</span>));</div><div class="line">    <span class="built_in">CGFloat</span> y = isShow ? (screenHeight - <span class="number">49</span>) : screenHeight;</div><div class="line">    <span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, y, screenWidth, <span class="number">49</span>);</div><div class="line">    <span class="keyword">if</span>(animated)</div><div class="line">    &#123;</div><div class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> animations:^&#123;</div><div class="line">            tabBar.frame = frame;</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        tabBar.frame = frame;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// TabBarIOS.ios.js</div><div class="line">var TabBarManager = require('NativeModules').TabBarManager;</div><div class="line">var findNodeHandle = require('findNodeHandle');</div><div class="line"></div><div class="line">var TabBarIOS = React.createClass(&#123;</div><div class="line">    hideTabBar: function(animated=true)</div><div class="line">    &#123;</div><div class="line">        TabBarManager.hideTabBar(findNodeHandle(global.tabBar), animated);</div><div class="line">    &#125;,</div><div class="line">    showTabBar: function(animated=true)</div><div class="line">    &#123;</div><div class="line">        TabBarManager.showTabBar(findNodeHandle(global.tabBar), animated);</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 使用</div><div class="line"><span class="tag">&lt;<span class="name">TabBarIOS</span></span></div><div class="line">    <span class="attr">ref</span>=<span class="string">&#123;(tabBar)</span>=&gt;&#123;global.tabBar = tabBar;&#125;&#125;&gt;</div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">TabBarIOS</span>&gt;</span></div><div class="line"></div><div class="line">// 显示</div><div class="line">global.tabBar.showTabBar();</div><div class="line"></div><div class="line">// 隐藏</div><div class="line">global.tabBar.hideTabBar();</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用markdown语法写ppt]]></title>
      <url>https://troyz.github.io/2016/08/31/%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E5%86%99ppt/</url>
      <content type="html"><![CDATA[<p><strong><a href="https://github.com/ksky521/nodePPT" target="_blank" rel="external">nodePPT</a></strong></p>
<p><a href="http://qdemo.sinaapp.com/" target="_blank" rel="external">演示地址</a></p>
<p><a href="/nodeppt/API%20Dev-Test.html">API Dev/Test</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[七牛云-文件列表-node.js]]></title>
      <url>https://troyz.github.io/2016/08/31/%E4%B8%83%E7%89%9B%E4%BA%91-%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8-node-js/</url>
      <content type="html"><![CDATA[<p>如题，在七牛上放了一些文件，有的时候想查看文件列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install qiniu</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ vim file_list.js</div><div class="line"><span class="keyword">var</span> qiniu = <span class="built_in">require</span>(<span class="string">"qiniu"</span>);</div><div class="line"></div><div class="line">qiniu.conf.ACCESS_KEY = <span class="string">'************'</span>;</div><div class="line">qiniu.conf.SECRET_KEY = <span class="string">'************'</span>;</div><div class="line"><span class="keyword">var</span> bucket = <span class="string">'YOUR_BUCKET'</span>;</div><div class="line">qiniu.rsf.listPrefix(bucket, <span class="string">''</span>, <span class="string">''</span>, <span class="number">1000</span>, <span class="string">''</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(err)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">console</span>.log(ret);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node file_list.js</div></pre></td></tr></table></figure></p>
<blockquote>
<p>// 输出结果：<br>{<br>  “marker”: “xxx”,<br>  “items”: [<br>    {<br>      “key”: “baicaopanjinqu/万年泉.jpg”,<br>      “hash”: “Fhyfof9FBr4P-BAnY-Y4W7FBSto5”,<br>      “fsize”: 432375,<br>      “mimeType”: “image/jpeg”,<br>      “putTime”: 14695198342091094<br>    },<br>    {<br>      “key”: “baicaopanjinqu/冰川杜鹃.jpg”,<br>      “hash”: “FqKT3TzLthFhMOVNUdy2JZV5ewI3”,<br>      “fsize”: 567102,<br>      “mimeType”: “image/jpeg”,<br>      “putTime”: 14695198328191896<br>    }<br>  ]<br>}</p>
</blockquote>
<hr>
<blockquote>
<p>参考：<a href="http://developer.qiniu.com/code/v6/sdk/nodejs.html" target="_blank" rel="external">七牛Node.js SDK 使用指南</a>、<a href="https://github.com/qiniu/nodejs-sdk" target="_blank" rel="external">Node.js SDK 源码地址</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Alfred workflow with Python]]></title>
      <url>https://troyz.github.io/2016/08/31/Alfred-workflow-with-Python/</url>
      <content type="html"><![CDATA[<p><strong><a href="https://www.alfredapp.com/help/workflows/inputs/script-filter/" target="_blank" rel="external">Using Script Filter objects</a></strong></p>
<p><strong><a href="https://github.com/deanishe/alfred-workflow" target="_blank" rel="external">alfred-workflow</a></strong></p>
<p><strong><a href="http://www.deanishe.net/alfred-workflow/tutorial.html" target="_blank" rel="external">Tutorial</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac与iPhone/iPad设备数据同步（基于USB）]]></title>
      <url>https://troyz.github.io/2016/08/31/Mac%E4%B8%8EiPhone-iPad%E8%AE%BE%E5%A4%87%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%EF%BC%88%E5%9F%BA%E4%BA%8EUSB%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Mac与iPhone/iPad之间数据传输常见的有以下几种方式：</p>
<ul>
<li>AirDrop</li>
<li>蓝牙</li>
<li>iCloud共享</li>
<li>iTunes</li>
<li>Mac上<code>照片</code>应用导入<br>以上几种方式都可以，而且前面3种不需要USB就可进行，后面2种需要借助iPhone电源线插入Mac的USB接口才能使用。</li>
</ul>
<p>但是，这几种方式都不是我想要的，因为这几种方式都<code>需要在Mac、iPhone设备上来来回回的配置</code>，而我比较懒~~~。</p>
<p>我需要一种<code>自动化</code>的工具来帮我完成数据同步，当iPhone电源线接到Mac后，可以用命令行来完成数据的同步工作。</p>
<blockquote>
<p><strong>初衷：</strong>iPhone版本的<strong><code>百度云盘App</code>不能免费同步视频</strong>了，需要开通会员才行！（⊙o⊙）其实我写这篇文章的目的只是想把手机上的视频自动上传到百度云盘而已！</p>
</blockquote>
<h3 id="MobileDevice"><a href="#MobileDevice" class="headerlink" title="MobileDevice"></a>MobileDevice</h3><p><strong><a href="https://github.com/mountainstorm/MobileDevice" target="_blank" rel="external">MobileDevice</a></strong>是一个Python的命令行工具，它封装了苹果的MobileDevice API（C）</p>
<h5 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python MobileDevice/ afc -h</div></pre></td></tr></table></figure>
<p>可以看到它支持以下用法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls                  lists the contents of the directory</div><div class="line">mkdir               creates a directory</div><div class="line">rm                  remove directory/file</div><div class="line">rmdir               remove directory/file</div><div class="line">ln                  create a link (symbolic or hard)</div><div class="line">get                 retrieve a file from the device</div><div class="line">put                 upload a file from the device</div><div class="line">view                retrieve a file from the device and preview as txt</div></pre></td></tr></table></figure></p>
<h5 id="简单使用一下"><a href="#简单使用一下" class="headerlink" title="简单使用一下"></a>简单使用一下</h5><p>查看iPhone的<code>/var/mobile/Media/</code>的子目录信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ python MobileDevice/ afc ls /var/mobile/Media/</div><div class="line">0: ******************** - <span class="string">"“issuser”的 iPhone"</span></div><div class="line">afc:  /</div><div class="line">d  102  04 Jan 08:18  AirFair/</div><div class="line">d  306  10 Aug 02:28  Airlock/</div><div class="line">d  238  23 Nov 01:42  Books/</div><div class="line">d  136  10 Aug 02:34  DCIM/</div><div class="line">d  170  10 Aug 02:42  Downloads/</div><div class="line">d  170  23 Nov 04:42  MediaAnalysis/</div><div class="line">d  850  10 Aug 02:47  PhotoData/</div><div class="line">d   68  10 Aug 02:43  Photos/</div><div class="line">d   68  10 Aug 03:00  PublicStaging/</div><div class="line">d  102  04 Jan 08:18  Purchases/</div><div class="line">d  170  31 Dec 08:54  Radio/</div><div class="line">d   68  30 Dec 03:11  Recordings/</div><div class="line">d  102  10 Aug 02:28  Safari/</div><div class="line">d   68  04 Jan 08:07  general_storage/</div><div class="line">d  204  04 Jan 08:18  iTunes_Control/</div><div class="line">-  181  04 Jan 08:44  ifbfav.plist</div></pre></td></tr></table></figure></p>
<p><code>DCIM</code>就是iPhone的照片、视频保存的文件夹；没错，我们需要从这个目录获取(<code>get</code>)视频。</p>
<h5 id="列出iPhone下的照片、视频"><a href="#列出iPhone下的照片、视频" class="headerlink" title="列出iPhone下的照片、视频"></a>列出iPhone下的照片、视频</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python MobileDevice/ afc ls /var/mobile/Media/DCIM/100APPLE</div><div class="line">0: ******************** - <span class="string">"“issuser”的 iPhone"</span></div><div class="line">afc:  /DCIM/100APPLE</div><div class="line">-   6164996  10 Aug 02:32  IMG_0037.PNG</div><div class="line">-     18738  10 Aug 02:44  IMG_0038.JPG</div><div class="line">-  15705880  10 Aug 02:47  IMG_0039.MOV</div></pre></td></tr></table></figure>
<p><code>MOV</code>格式就是视频，</p>
<h5 id="拷贝iPhone视频到Mac"><a href="#拷贝iPhone视频到Mac" class="headerlink" title="拷贝iPhone视频到Mac"></a>拷贝iPhone视频到Mac</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python MobileDevice/ afc get /var/mobile/Media/DCIM/100APPLE/IMG_0039.MOV IMG_0039.MOV</div></pre></td></tr></table></figure>
<h3 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h3><ul>
<li>增量式拷贝iPhone的视频到Mac</li>
<li>如果某个视频文件在Mac上已经存在，则跳过。<br><strong><code>movie.py</code></strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment"># -*- coding:utf8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> MobileDevice <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line"></div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listIphoneMovies</span><span class="params">(afc, path)</span>:</span></div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> afc.listdir(path):</div><div class="line">        isdir = <span class="string">u''</span></div><div class="line">        <span class="keyword">if</span> afc.lstat(path + name).st_ifmt == stat.S_IFDIR:</div><div class="line">            isdir = <span class="string">u'/'</span></div><div class="line">        <span class="comment"># print path + name + isdir</span></div><div class="line">        <span class="keyword">if</span> afc.lstat(path + name).st_ifmt == stat.S_IFDIR:</div><div class="line">            listIphoneMovies(afc, path + name + isdir)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            (_,ext) = os.path.splitext(name)</div><div class="line">            <span class="keyword">if</span> ext.lower() == <span class="string">".mov"</span>:</div><div class="line">                copyMovieFileFromIphoneToMac(afc, path, name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyMovieFileFromIphoneToMac</span><span class="params">(afc, path, name)</span>:</span></div><div class="line">    spath = path + name</div><div class="line">    dpath = os.path.join(<span class="string">'/Users/issuser/百度云同步盘/iPhone视频'</span>, name)</div><div class="line">    tmppath = os.path.join(os.getcwd(), name)</div><div class="line">    <span class="keyword">if</span> os.path.exists(dpath):</div><div class="line">        print(<span class="string">"Movie already exists on Mac: "</span> + spath)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    print(<span class="string">"copy iPhone movie: "</span> + path + name + <span class="string">" to Mac: "</span> + dpath)</div><div class="line">    s = afc.open(spath, <span class="string">u'r'</span>)</div><div class="line">    d = open(tmppath, <span class="string">u'w+'</span>)</div><div class="line">    len = <span class="number">2048</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        buf = s.read(len)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> buf:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        d.write(buf)</div><div class="line">    <span class="comment"># d.write(s.readall())</span></div><div class="line">    d.close()</div><div class="line">    s.close()</div><div class="line">    shutil.move(tmppath, dpath)</div><div class="line"></div><div class="line"></div><div class="line">dev = list_devices().values()[<span class="number">0</span>]</div><div class="line">dev.connect()</div><div class="line"><span class="comment">#afc = AFC(dev)</span></div><div class="line">afc = afcmediadirectory.AFCMediaDirectory(dev)</div><div class="line"><span class="comment">#listIphoneMovies(afc, u'/var/mobile/Media') # recursive print of all files visible</span></div><div class="line">listIphoneMovies(afc, <span class="string">u'/DCIM/100APPLE/'</span>) <span class="comment"># recursive print of all files visible</span></div><div class="line"></div><div class="line">afc.disconnect()</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>，<a href="https://github.com/mountainstorm/MobileDevice" target="_blank" rel="external">MobileDevice</a>的<a href="https://github.com/mountainstorm/MobileDevice/blob/master/README.md" target="_blank" rel="external">README.md</a>中的例子有问题，不能直接运行；编写脚本的时候可以参考<a href="https://github.com/mountainstorm/MobileDevice/blob/master/afcmediadirectory.py" target="_blank" rel="external">afcmediadirectory.py</a>中的<code>cmd_*</code>函数</p>
</blockquote>
<h5 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python movie.py</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Movie already exists on Mac: /DCIM/100APPLE/IMG_0038.MOV</div><div class="line">copy iPhone movie: /DCIM/100APPLE/IMG_0039.MOV to Mac: /.../IMG_0039.MOV</div></pre></td></tr></table></figure>
<h5 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h5><p>现在我们已经将iPhone上的视频拷贝到Mac的目录了，下一步就设置百度云Mac客户端的默认同步目录为上面的Mac目录，视频就自动从Mac上传到百度云盘了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Charles中文乱码]]></title>
      <url>https://troyz.github.io/2016/08/31/Charles%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>正常情况下，<code>Server</code>端提供给<code>Client</code>端的所有接口的<code>Response</code>中应该有字符集的<code>Header</code>设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type: application/json;charset=UTF-8</div></pre></td></tr></table></figure></p>
<p>如果没有，可能造成某些平台的<code>Client</code>中文解析乱码。</p>
<p>很不幸，我们团队的<code>Server</code>端开发人员的意识不够，很多<code>JSON</code>接口都不规范，用<a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a>抓包中文乱码。</p>
<p>以下为解决<a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a>中文乱码的方案：</p>
<h3 id="方案1：修改Charles的配置文件Info-plist"><a href="#方案1：修改Charles的配置文件Info-plist" class="headerlink" title="方案1：修改Charles的配置文件Info.plist"></a>方案1：修改<code>Charles</code>的配置文件<code>Info.plist</code></h3><p>右键Charles-&gt;在Finder中显示-&gt;右键<code>Charles.app</code>-&gt;显示包内容-&gt;Contents-&gt;双击打开Info.plist</p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-4d6343017c1deee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改JVMOptions: -Dfile.encoding=UTF-8"></p>
<p>网上很多人都是用这种方式，但是我试了下，没有成功，我的<a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a>版本是<code>v3.11.1</code></p>
<h3 id="方案2：在Charles中Rewrite-Header"><a href="#方案2：在Charles中Rewrite-Header" class="headerlink" title="方案2：在Charles中Rewrite Header"></a>方案2：在<code>Charles</code>中<code>Rewrite</code> <code>Header</code></h3><p>打开<code>Charles</code>-&gt;Tool-&gt;Rewrite-&gt;勾选<code>Enable Rewrite</code>-&gt;点击<code>Sets</code>面板<code>Add</code>按钮-&gt;右侧<code>Locations</code>面板点击<code>Add</code>按钮输入url匹配规则(你server端的url规则)-&gt;右侧<code>Rules</code>面板点击<code>Add</code>按钮输入，详情如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/267318-6f7d52c438b67551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Charles Rewrite规则配置"></p>
<p><strong>注意</strong>：这里需要根据你<code>Server</code>端返回数据的具体情况来，因为我的<code>Server</code>端并没有返回<code>Content-Type</code>这个Header，并且所有接口都返回了<code>Server: Apache-Coyote/1.1</code>这个Header，所以我这个<code>Rewrite</code>规则实际上是修改<code>Server: Apache-Coyote/1.1</code>为<code>Content-Type: application/json;charset=UTF-8</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多SSH KEY管理]]></title>
      <url>https://troyz.github.io/2016/08/31/%E5%A4%9ASSH-KEY%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我的<code>Mac</code>要求既可以提交代码到<code>github</code>，也可以提交代码到<code>oschina</code>，提交的时候都走<code>ssh</code>协议，但是默认情况下只能有一个<code>ssh key</code>(~/ssh)</p>
<p><a href="http://yijiebuyi.com/blog/f18d38eb7cfee860c117d629fdb16faf.html" target="_blank" rel="external">同一台电脑关于多个SSH KEY管理</a></p>
<p><a href="https://git.oschina.net/oschina/git-osc/wikis/%E5%B8%AE%E5%8A%A9#ssh-keys" target="_blank" rel="external">开源中国SSH Key</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Http抓包]]></title>
      <url>https://troyz.github.io/2016/08/31/Http%E6%8A%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<h3 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h3><table>
<thead>
<tr>
<th>工具</th>
<th>OS</th>
<th>特点</th>
<th>教程</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.telerik.com/fiddler" target="_blank" rel="external">Fiddler</a></td>
<td>Windows</td>
<td><strong>监控</strong>机器上发送的Http(s)请求<br> 模拟发送Get/Post请求<br>可作为<strong>代理</strong></td>
<td><a href="http://cache.baiducontent.com/c?m=9f65cb4a8c8507ed4fece763105392230e54f73260878e482a958448e435061e5a00b0e77e484b578ed82f2750f51218bded367034033db59bd58a4ec0bb93292a8d273e671cf11b548c47bb8e1b65972fc401bff947b0fae732e2f494959d&amp;p=8b2a97299fb111a05be6912a1e5e8b&amp;newp=8b2a97128d821deb08e29775080789231610db2151d4d31f6b82c825d7331b001c3bbfb423231302d6c1796404ac495de8f436793d092ba3dda5c91d9fb4c57479df7c752c58&amp;user=baidu&amp;fm=sc&amp;query=fiddler+http&amp;qid=eed90de700111576&amp;p1=9" target="_blank" rel="external">Fiddler教程</a><br>.<br><a href="http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/ConfigureForiOS" target="_blank" rel="external">SSL Certificates</a></td>
</tr>
<tr>
<td><a href="http://www.getpostman.com/" target="_blank" rel="external">PostMan</a></td>
<td>跨平台</td>
<td>可模拟发送Get/Post请求<br>保存请求、重命名<br>环境变量、批量测试</td>
<td><a href="http://www.jianshu.com/p/615f668d91a6" target="_blank" rel="external">API开发神器-Postman</a> <br>.<br><a href="https://www.getpostman.com/docs/sandbox" target="_blank" rel="external">Testing Sandbox</a> <br>.<br><a href="http://blog.getpostman.com/2016/06/26/using-postman-proxy-to-capture-and-inspect-api-calls-from-ios-or-android-devices/" target="_blank" rel="external">代理iPhone/Android设备</a></td>
</tr>
<tr>
<td><a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a></td>
<td>跨平台</td>
<td><strong>监控</strong>机器上发送的Http(s)请求<br> 模拟发送Get/Post请求<br>可作为<strong>代理</strong></td>
<td><a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="external">Charles 从入门到精通</a> <br>.<br> <a href="http://www.jianshu.com/p/7a332f6ccfbd" target="_blank" rel="external">Charles中文乱码</a><br>.<br><a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/" target="_blank" rel="external">SSL Certificates</a></td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>代理</strong>工具的用途：举个例子，你可以在iPhone上配置网络代理为你PC机器上<code>Fiddler</code>/<code>Charles</code>监听的IP、端口，然后<code>Fiddler</code>/<code>Charles</code>就可以监听到你iPhone设备上发送的Http(s)请求。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://troyz.github.io/2016/08/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
